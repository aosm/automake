\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename automake.info
@settitle automake
@setchapternewpage off
@c %**end of header

@include version.texi

@dircategory GNU programming tools
@direntry
* automake: (automake).		Making Makefile.in's
@end direntry

@dircategory Individual utilities
@direntry
* aclocal: (automake)Invoking aclocal.          Generating aclocal.m4
@end direntry

@ifinfo
This file documents GNU automake @value{VERSION}

Copyright 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph


@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end ifinfo


@titlepage
@title GNU Automake
@subtitle For version @value{VERSION}, @value{UPDATED}
@author David MacKenzie and Tom Tromey

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1995, 1996, 2000, 2001, 2002 Free Software Foundation, Inc.
@sp 2
This is the first edition of the GNU Automake documentation,@*
and is consistent with GNU Automake @value{VERSION}.@*
@sp 2
Published by the Free Software Foundation @*
59 Temple Place - Suite 330, @*
Boston, MA 02111-1307 USA @*

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end titlepage

@c Define an index of configure output variables.
@defcodeindex ov
@c Define an index of configure variables.
@defcodeindex cv
@c Define an index of options.
@defcodeindex op
@c Define an index of targets.
@defcodeindex tr
@c Define an index of commands.
@defcodeindex cm

@c Put the macros and variables into their own index.
@c @syncodeindex fn cp
@syncodeindex ov vr
@syncodeindex cv vr
@syncodeindex fn vr

@c Put everything else into one index (arbitrarily chosen to be the concept index).
@syncodeindex op cp
@syncodeindex tr cp
@syncodeindex cm cp

@ifnottex
@node Top, Introduction, (dir), (dir)
@comment  node-name,  next,  previous,  up
@top GNU Automake

This file documents the GNU Automake package.  Automake is a program
which creates GNU standards-compliant Makefiles from template files.
This edition documents version @value{VERSION}.

@menu
* Introduction::                Automake's purpose
* Generalities::                General ideas
* Examples::                    Some example packages
* Invoking Automake::           Creating a Makefile.in
* configure::                   Scanning configure.ac or configure.in
* Top level::                   The top-level Makefile.am
* Alternative::                 An alternative approach to subdirectories
* Rebuilding::                  Automatic rebuilding of Makefile
* Programs::                    Building programs and libraries
* Other objects::               Other derived objects
* Other GNU Tools::             Other GNU Tools
* Documentation::               Building documentation
* Install::                     What gets installed
* Clean::                       What gets cleaned
* Dist::                        What goes in a distribution
* Tests::                       Support for test suites
* Options::                     Changing Automake's behavior
* Miscellaneous::               Miscellaneous rules
* Include::                     Including extra files in an Automake template.
* Conditionals::                Conditionals
* Gnits::                       The effect of @code{--gnu} and @code{--gnits}
* Cygnus::                      The effect of @code{--cygnus}
* Extending::                   Extending Automake
* Distributing::                Distributing the Makefile.in
* API versioning::              About compatibility between Automake versions
* Macro and Variable Index::
* General Index::
@end menu

@end ifnottex


@node Introduction, Generalities, Top, Top
@chapter Introduction

Automake is a tool for automatically generating @file{Makefile.in}s from
files called @file{Makefile.am}.  Each @file{Makefile.am} is basically a
series of @code{make} macro definitions (with rules being thrown in
occasionally).  The generated @file{Makefile.in}s are compliant with the
GNU Makefile standards.

@cindex GNU Makefile standards

The GNU Makefile Standards Document
(@pxref{Makefile Conventions, , , standards, The GNU Coding Standards})
is long, complicated, and subject to change.  The goal of Automake is to
remove the burden of Makefile maintenance from the back of the
individual GNU maintainer (and put it on the back of the Automake
maintainer).

The typical Automake input file is simply a series of macro definitions.
Each such file is processed to create a @file{Makefile.in}.  There
should generally be one @file{Makefile.am} per directory of a project.

@cindex Constraints of Automake
@cindex Automake constraints

Automake does constrain a project in certain ways; for instance it
assumes that the project uses Autoconf (@pxref{Top, , Introduction,
autoconf, The Autoconf Manual}), and enforces certain restrictions on
the @file{configure.in} contents@footnote{Autoconf 2.50 promotes
@file{configure.ac} over @file{configure.in}.  The rest of this
documentation will refer to @file{configure.in} as this use is not yet
spread, but Automake supports @file{configure.ac} too.}.

@cindex Automake requirements
@cindex Requirements, Automake

Automake requires @code{perl} in order to generate the
@file{Makefile.in}s.  However, the distributions created by Automake are
fully GNU standards-compliant, and do not require @code{perl} in order
to be built.

@cindex BUGS, reporting
@cindex Reporting BUGS
@cindex E-mail, bug reports

Mail suggestions and bug reports for Automake to
@email{bug-automake@@gnu.org}.


@node Generalities, Examples, Introduction, Top
@chapter General ideas

The following sections cover a few basic ideas that will help you
understand how Automake works.

@menu
* General Operation::           General operation of Automake
* Strictness::                  Standards conformance checking
* Uniform::                     The Uniform Naming Scheme
* Canonicalization::            How derived variables are named
* User Variables::              Variables reserved for the user
* Auxiliary Programs::          Programs automake might require
@end menu


@node General Operation, Strictness, Generalities, Generalities
@section General Operation

Automake works by reading a @file{Makefile.am} and generating a
@file{Makefile.in}.  Certain macros and targets defined in the
@file{Makefile.am} instruct Automake to generate more specialized code;
for instance, a @samp{bin_PROGRAMS} macro definition will cause targets
for compiling and linking programs to be generated.

@cindex Non-standard targets
@cindex cvs-dist, non-standard example
@trindex cvs-dist

The macro definitions and targets in the @file{Makefile.am} are copied
verbatim into the generated file.  This allows you to add arbitrary code
into the generated @file{Makefile.in}.  For instance the Automake
distribution includes a non-standard @code{cvs-dist} target, which the
Automake maintainer uses to make distributions from his source control
system.

@cindex GNU make extensions

Note that most GNU make extensions are not recognized by Automake.  Using
such extensions in a @file{Makefile.am} will lead to errors or confusing
behavior.

@cindex Append operator
A special exception is that the GNU make append operator, @samp{+=}, is
supported.  This operator appends its right hand argument to the macro
specified on the left.  Automake will translate the operator into
an ordinary @samp{=} operator; @samp{+=} will thus work with any make program.

Note that it is only valid to append to a macro in the same conditional
context as the macro was originally defined. @xref{Conditional Append}, for
more information.

Automake tries to group comments with adjoining targets and macro
definitions in an intelligent way.
@c FIXME: What does this imply practically?

@cindex Make targets, overriding
@cindex Overriding make targets

A target defined in @file{Makefile.am} generally overrides any such
target of a similar name that would be automatically generated by
@code{automake}.  Although this is a supported feature, it is generally
best to avoid making use of it, as sometimes the generated rules are
very particular.

@cindex Macros, overriding
@cindex Overriding make macros

Similarly, a macro defined in @file{Makefile.am} or @code{AC_SUBST}'ed
from @file{configure.in} will override any definition of the macro that
@code{automake} would ordinarily create.  This feature is more often
useful than the ability to override a target definition.  Be warned that
many of the macros generated by @code{automake} are considered to be for
internal use only, and their names might change in future releases.

@cindex Recursive operation of Automake
@cindex Automake, recursive operation
@cindex Example of recursive operation

When examining a macro definition, Automake will recursively examine
macros referenced in the definition.  For example, if Automake is
looking at the content of @code{foo_SOURCES} in this snippet

@example
xs = a.c b.c
foo_SOURCES = c.c $(xs)
@end example

it would use the files @file{a.c}, @file{b.c}, and @file{c.c} as the
contents of @code{foo_SOURCES}.

@cindex ## (special Automake comment)
@cindex Special Automake comment
@cindex Comment, special to Automake

Automake also allows a form of comment which is @emph{not} copied into
the output; all lines beginning with @samp{##} (leading spaces allowed)
are completely ignored by Automake.

It is customary to make the first line of @file{Makefile.am} read:

@cindex Makefile.am, first line
@cindex First line of Makefile.am

@example
## Process this file with automake to produce Makefile.in
@end example

@c FIXME discuss putting a copyright into Makefile.am here?  I would but
@c I don't know quite what to say.

@c FIXME document customary ordering of Makefile.am here!


@node Strictness, Uniform, General Operation, Generalities
@section Strictness

@cindex Non-GNU packages

While Automake is intended to be used by maintainers of GNU packages, it
does make some effort to accommodate those who wish to use it, but do
not want to use all the GNU conventions.

@cindex Strictness, defined
@cindex Strictness, foreign
@cindex foreign strictness
@cindex Strictness, gnu
@cindex gnu strictness
@cindex Strictness, gnits
@cindex gnits strictness

To this end, Automake supports three levels of @dfn{strictness}---the
strictness indicating how stringently Automake should check standards
conformance.

The valid strictness levels are:

@table @samp
@item foreign
Automake will check for only those things which are absolutely
required for proper operations.  For instance, whereas GNU standards
dictate the existence of a @file{NEWS} file, it will not be required in
this mode.  The name comes from the fact that Automake is intended to be
used for GNU programs; these relaxed rules are not the standard mode of
operation.

@item gnu
Automake will check---as much as possible---for compliance to the GNU
standards for packages.  This is the default.

@item gnits
Automake will check for compliance to the as-yet-unwritten @dfn{Gnits
standards}.  These are based on the GNU standards, but are even more
detailed.  Unless you are a Gnits standards contributor, it is
recommended that you avoid this option until such time as the Gnits
standard is actually published (which may never happen).
@end table

For more information on the precise implications of the strictness
level, see @ref{Gnits}.

Automake also has a special ``cygnus'' mode which is similar to
strictness but handled differently.  This mode is useful for packages
which are put into a ``Cygnus'' style tree (e.g., the GCC tree).  For
more information on this mode, see @ref{Cygnus}.


@node Uniform, Canonicalization, Strictness, Generalities
@section The Uniform Naming Scheme

@cindex Uniform naming scheme

Automake macros (from here on referred to as @emph{variables}) generally
follow a @dfn{uniform naming scheme} that makes it easy to decide how
programs (and other derived objects) are built, and how they are
installed.  This scheme also supports @code{configure} time
determination of what should be built.

@cindex _PROGRAMS primary variable
@cindex PROGRAMS primary variable
@cindex Primary variable, PROGRAMS
@cindex Primary variable, defined

At @code{make} time, certain variables are used to determine which
objects are to be built.  The variable names are made of several pieces
which are concatenated together.

The piece which tells automake what is being built is commonly called
the @dfn{primary}.  For instance, the primary @code{PROGRAMS} holds a
list of programs which are to be compiled and linked.
@vindex PROGRAMS

@cindex pkglibdir, defined
@cindex pkgincludedir, defined
@cindex pkgdatadir, defined

@vindex pkglibdir
@vindex pkgincludedir
@vindex pkgdatadir

A different set of names is used to decide where the built objects
should be installed.  These names are prefixes to the primary which
indicate which standard directory should be used as the installation
directory.  The standard directory names are given in the GNU standards
(@pxref{Directory Variables, , , standards, The GNU Coding Standards}).
Automake extends this list with @code{pkglibdir}, @code{pkgincludedir},
and @code{pkgdatadir}; these are the same as the non-@samp{pkg}
versions, but with @samp{@@PACKAGE@@} appended.  For instance,
@code{pkglibdir} is defined as @code{$(libdir)/@@PACKAGE@@}.
@cvindex PACKAGE, directory

@cindex EXTRA_, prepending

For each primary, there is one additional variable named by prepending
@samp{EXTRA_} to the primary name.  This variable is used to list
objects which may or may not be built, depending on what
@code{configure} decides.  This variable is required because Automake
must statically know the entire list of objects that may be built in
order to generate a @file{Makefile.in} that will work in all cases.

@cindex EXTRA_PROGRAMS, defined
@cindex Example, EXTRA_PROGRAMS
@cindex cpio example

For instance, @code{cpio} decides at configure time which programs are
built.  Some of the programs are installed in @code{bindir}, and some
are installed in @code{sbindir}:

@example
EXTRA_PROGRAMS = mt rmt
bin_PROGRAMS = cpio pax
sbin_PROGRAMS = @@MORE_PROGRAMS@@
@end example

Defining a primary without a prefix as a variable, e.g.,
@code{PROGRAMS}, is an error.

Note that the common @samp{dir} suffix is left off when constructing the
variable names; thus one writes @samp{bin_PROGRAMS} and not
@samp{bindir_PROGRAMS}.

Not every sort of object can be installed in every directory.  Automake
will flag those attempts it finds in error.
Automake will also diagnose obvious misspellings in directory names.

@cindex Extending list of installation directories
@cindex Installation directories, extending list

Sometimes the standard directories---even as augmented by Automake---
are not enough.  In particular it is sometimes useful, for clarity, to
install objects in a subdirectory of some predefined directory.  To this
end, Automake allows you to extend the list of possible installation
directories.  A given prefix (e.g. @samp{zar}) is valid if a variable of
the same name with @samp{dir} appended is defined (e.g. @code{zardir}).

@cindex HTML support, example

For instance, until HTML support is part of Automake, you could use this
to install raw HTML documentation:

@example
htmldir = $(prefix)/html
html_DATA = automake.html
@end example

@cindex noinst primary prefix, definition

The special prefix @samp{noinst} indicates that the objects in question
should be built but not installed at all.  This is usually used for
objects required to build the rest of your package, for instance static
libraries (@pxref{A Library}), or helper scripts.

@cindex check primary prefix, definition

The special prefix @samp{check} indicates that the objects in question
should not be built until the @code{make check} command is run.  Those
objects are not installed either.

The current primary names are @samp{PROGRAMS}, @samp{LIBRARIES},
@samp{LISP}, @samp{PYTHON}, @samp{JAVA}, @samp{SCRIPTS}, @samp{DATA},
@samp{HEADERS}, @samp{MANS}, and @samp{TEXINFOS}.
@vindex PROGRAMS
@vindex LIBRARIES
@vindex LISP
@vindex PYTHON
@vindex JAVA
@vindex SCRIPTS
@vindex DATA
@vindex HEADERS
@vindex MANS
@vindex TEXINFOS

Some primaries also allow additional prefixes which control other
aspects of @code{automake}'s behavior.  The currently defined prefixes
are @samp{dist_}, @samp{nodist_}, and @samp{nobase_}.  These prefixes
are explained later (@pxref{Program and Library Variables}).


@node Canonicalization, User Variables, Uniform, Generalities
@section How derived variables are named

@cindex canonicalizing Automake macros

Sometimes a Makefile variable name is derived from some text the
maintainer supplies.  For instance, a program name listed in
@samp{_PROGRAMS} is rewritten into the name of a @samp{_SOURCES}
variable.  In cases like this, Automake canonicalizes the text, so that
program names and the like do not have to follow Makefile macro naming
rules.  All characters in the name except for letters, numbers, the
strudel (@@), and the underscore are turned into underscores when making
macro references.

For example, if your program is named @code{sniff-glue}, the derived
variable name would be @code{sniff_glue_SOURCES}, not
@code{sniff-glue_SOURCES}.  Similarly the sources for a library named
@code{libmumble++.a} should be listed in the
@code{libmumble___a_SOURCES} variable.

The strudel is an addition, to make the use of Autoconf substitutions in
macro names less obfuscating.


@node User Variables, Auxiliary Programs, Canonicalization, Generalities
@section Variables reserved for the user

@cindex variables, reserved for the user
@cindex user variables

Some @code{Makefile} variables are reserved by the GNU Coding Standards
for the use of the ``user'' -- the person building the package.  For
instance, @code{CFLAGS} is one such variable.

Sometimes package developers are tempted to set user variables such as
@code{CFLAGS} because it appears to make their job easier -- they don't
have to introduce a second variable into every target.

However, the package itself should never set a user variable,
particularly not to include switches which are required for proper
compilation of the package.  Since these variables are documented as
being for the package builder, that person rightfully expects to be able
to override any of these variables at build time.
@c FIXME: maybe Automake could bark if a developer forces a user variable
@c from Makefile.am.

To get around this problem, automake introduces an automake-specific
shadow variable for each user flag variable.  (Shadow variables are not
introduced for variables like @code{CC}, where they would make no
sense.)  The shadow variable is named by prepending @samp{AM_} to the
user variable's name.  For instance, the shadow variable for
@code{YFLAGS} is @code{AM_YFLAGS}.


@node Auxiliary Programs,  , User Variables, Generalities
@section Programs automake might require

@cindex Programs, auxiliary
@cindex Auxiliary programs

Automake sometimes requires helper programs so that the generated
@file{Makefile} can do its work properly.  There are a fairly large
number of them, and we list them here.

@table @code
@item ansi2knr.c
@itemx ansi2knr.1
These two files are used by the automatic de-ANSI-fication support
(@pxref{ANSI}).

@item compile
This is a wrapper for compilers which don't accept both @samp{-c} and
@samp{-o} at the same time.  It is only used when absolutely required.
Such compilers are rare.

@item config.guess
@itemx config.sub
These programs compute the canonical triplets for the given build, host,
or target architecture.  These programs are updated regulary to support
new architectures and fix probes broken by changes in new kernel
versions.  You are encouraged to fetch the latest versions of these
files from @url{ftp://ftp.gnu.org/gnu/config/} before making a release.

@item depcomp
This program understands how to run a compiler so that it will generate
not only the desired output but also dependency information which is
then used by the automatic dependency tracking feature.

@item elisp-comp
This program is used to byte-compile Emacs Lisp code.

@item install-sh
This is a replacement for the @code{install} program which works on
platforms where @code{install} is unavailable or unusable.

@item mdate-sh
This script is used to generate a @file{version.texi} file.  It examines
a file and prints some date information about it.

@item missing
This wraps a number of programs which are typically only required by
maintainers.  If the program in question doesn't exist, @code{missing}
prints an informative warning and attempts to fix things so that the
build can continue.

@item mkinstalldirs
This works around the fact that @code{mkdir -p} is not portable.

@item py-compile
This is used to byte-compile Python scripts.

@item texinfo.tex
Not a program, this file is required for @code{make dvi} to work when
Texinfo sources are in the package.

@item ylwrap
This program wraps @code{lex} and @code{yacc} and ensures that, for
instance, multiple @code{yacc} instances can be invoked in a single
directory in parallel.

@end table


@node Examples, Invoking Automake, Generalities, Top
@chapter Some example packages

@menu
* Complete::                    A simple example, start to finish
* Hello::                       A classic program
* etags::                       Building etags and ctags
@end menu


@node Complete, Hello, Examples, Examples
@section A simple example, start to finish

@cindex Complete example

Let's suppose you just finished writing @code{zardoz}, a program to make
your head float from vortex to vortex.  You've been using Autoconf to
provide a portability framework, but your @file{Makefile.in}s have been
ad-hoc.  You want to make them bulletproof, so you turn to Automake.

@cindex AM_INIT_AUTOMAKE, example use

The first step is to update your @file{configure.in} to include the
commands that @code{automake} needs.  The way to do this is to add an
@code{AM_INIT_AUTOMAKE} call just after @code{AC_INIT}:

@example
AC_INIT(zardoz, 1.0)
AM_INIT_AUTOMAKE
...
@end example

Since your program doesn't have any complicating factors (e.g., it
doesn't use @code{gettext}, it doesn't want to build a shared library),
you're done with this part.  That was easy!

@cindex aclocal program, introduction
@cindex aclocal.m4, preexisting
@cindex acinclude.m4, defined

Now you must regenerate @file{configure}.  But to do that, you'll need
to tell @code{autoconf} how to find the new macro you've used.  The
easiest way to do this is to use the @code{aclocal} program to generate
your @file{aclocal.m4} for you.  But wait... maybe you already have an
@file{aclocal.m4}, because you had to write some hairy macros for your
program.  The @code{aclocal} program lets you put your own macros into
@file{acinclude.m4}, so simply rename and then run:

@example
mv aclocal.m4 acinclude.m4
aclocal
autoconf
@end example

@cindex zardoz example

Now it is time to write your @file{Makefile.am} for @code{zardoz}.
Since @code{zardoz} is a user program, you want to install it where the
rest of the user programs go: @code{bindir}.  Additionally,
@code{zardoz} has some Texinfo documentation.  Your @file{configure.in}
script uses @code{AC_REPLACE_FUNCS}, so you need to link against
@samp{@@LIBOBJS@@}.  So here's what you'd write:

@example
bin_PROGRAMS = zardoz
zardoz_SOURCES = main.c head.c float.c vortex9.c gun.c
zardoz_LDADD = @@LIBOBJS@@

info_TEXINFOS = zardoz.texi
@end example

Now you can run @code{automake --add-missing} to generate your
@file{Makefile.in} and grab any auxiliary files you might need, and
you're done!


@node Hello, etags, Complete, Examples
@section A classic program

@cindex Example, GNU Hello
@cindex Hello example
@cindex GNU Hello, example

@uref{ftp://prep.ai.mit.edu/pub/gnu/hello-1.3.tar.gz, GNU hello} is
renowned for its classic simplicity and versatility.  This section shows
how Automake could be used with the GNU Hello package.  The examples
below are from the latest beta version of GNU Hello, but with all of the
maintainer-only code stripped out, as well as all copyright comments.

Of course, GNU Hello is somewhat more featureful than your traditional
two-liner.  GNU Hello is internationalized, does option processing, and
has a manual and a test suite.

@cindex configure.in, from GNU Hello
@cindex GNU Hello, configure.in
@cindex Hello, configure.in

Here is the @file{configure.in} from GNU Hello:
@c FIXME: This definitively requires an update.

@example
dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/hello.c)
AM_INIT_AUTOMAKE(hello, 1.3.11)
AM_CONFIG_HEADER(config.h)

dnl Set of available languages.
ALL_LINGUAS="de fr es ko nl no pl pt sl sv"

dnl Checks for programs.
AC_PROG_CC
AC_ISC_POSIX

dnl Checks for libraries.

dnl Checks for header files.
AC_STDC_HEADERS
AC_HAVE_HEADERS(string.h fcntl.h sys/file.h sys/param.h)

dnl Checks for library functions.
AC_FUNC_ALLOCA

dnl Check for st_blksize in struct stat
AC_ST_BLKSIZE

dnl internationalization macros
AM_GNU_GETTEXT
AC_OUTPUT([Makefile doc/Makefile intl/Makefile po/Makefile.in \
           src/Makefile tests/Makefile tests/hello],
   [chmod +x tests/hello])
@end example

The @samp{AM_} macros are provided by Automake (or the Gettext library);
the rest are standard Autoconf macros.


The top-level @file{Makefile.am}:

@example
EXTRA_DIST = BUGS ChangeLog.O
SUBDIRS = doc intl po src tests
@end example

As you can see, all the work here is really done in subdirectories.

The @file{po} and @file{intl} directories are automatically generated
using @code{gettextize}; they will not be discussed here.

@cindex Texinfo file handling example
@cindex Example, handling Texinfo files

In @file{doc/Makefile.am} we see:

@example
info_TEXINFOS = hello.texi
hello_TEXINFOS = gpl.texi
@end example

This is sufficient to build, install, and distribute the GNU Hello
manual.

@cindex Regression test example
@cindex Example, regression test

Here is @file{tests/Makefile.am}:

@example
TESTS = hello
EXTRA_DIST = hello.in testdata
@end example

The script @file{hello} is generated by @code{configure}, and is the
only test case.  @code{make check} will run this test.

@cindex INCLUDES, example usage

Last we have @file{src/Makefile.am}, where all the real work is done:
@c FIXME: As all the Hello World excerpts in this manual, this
@c shows deprecated features (here: $(INCLUDES)).

@example
bin_PROGRAMS = hello
hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h
hello_LDADD = @@INTLLIBS@@ @@ALLOCA@@
localedir = $(datadir)/locale
INCLUDES = -I../intl -DLOCALEDIR=\"$(localedir)\"
@end example


@node etags,  , Hello, Examples
@section Building etags and ctags

@cindex Example, ctags and etags
@cindex ctags Example
@cindex etags Example

Here is another, trickier example.  It shows how to generate two
programs (@code{ctags} and @code{etags}) from the same source file
(@file{etags.c}).  The difficult part is that each compilation of
@file{etags.c} requires different @code{cpp} flags.

@example
bin_PROGRAMS = etags ctags
ctags_SOURCES =
ctags_LDADD = ctags.o

etags.o: etags.c
        $(COMPILE) -DETAGS_REGEXPS -c etags.c

ctags.o: etags.c
        $(COMPILE) -DCTAGS -o ctags.o -c etags.c
@end example

Note that there is no @code{etags_SOURCES} definition.  Automake will
implicitly assume that there is a source file named @file{etags.c}, and
define rules to compile @file{etags.o} and link @file{etags}.  The
@code{etags.o: etags.c} rule supplied by the above @file{Makefile.am},
will override the Automake generated rule to build @file{etags.o}.

@code{ctags_SOURCES} is defined to be empty---that way no implicit value
is substituted.  Because we have not listed the source of
@file{ctags}, we have to tell Automake how to link the program.  This is
the purpose of the @code{ctags_LDADD} line.  A @code{ctags_DEPENDENCIES}
variable, holding the dependencies of the @file{ctags} target will be
automatically generated by Automake from the contant of
@code{ctags_LDADD}.

The above rules won't work if your compiler doesn't accept both
@samp{-c} and @samp{-o}.  The simplest fix for this is to introduce a
bogus dependency (to avoid problems with a parallel @code{make}):

@example
etags.o: etags.c ctags.o
        $(COMPILE) -DETAGS_REGEXPS -c etags.c

ctags.o: etags.c
        $(COMPILE) -DCTAGS -c etags.c && mv etags.o ctags.o
@end example

Also, these explicit rules do not work if the de-ANSI-fication feature
is used (@pxref{ANSI}).  Supporting de-ANSI-fication requires a little
more work:

@example
etags._o: etags._c ctags.o
        $(COMPILE) -DETAGS_REGEXPS -c etags.c

ctags._o: etags._c
        $(COMPILE) -DCTAGS -c etags.c && mv etags._o ctags.o
@end example

As it turns out, there is also a much easier way to do this same task.
Some of the above techniques are useful enough that we've kept the
example in the manual.  However if you were to build @code{etags} and
@code{ctags} in real life, you would probably use per-program
compilation flags, like so:

@example
bin_PROGRAMS = ctags etags

ctags_SOURCES = etags.c
ctags_CFLAGS = -DCTAGS

etags_SOURCES = etags.c
etags_CFLAGS = -DETAGS_REGEXPS
@end example

In this case Automake will cause @file{etags.c} to be compiled twice,
with different flags.  De-ANSI-fication will work automatically.  In
this instance, the names of the object files would be chosen by
automake; they would be @file{ctags-etags.o} and @file{etags-etags.o}.
(The name of the object files rarely matters.)


@node Invoking Automake, configure, Examples, Top
@chapter Creating a @file{Makefile.in}

@cindex Multiple configure.in files
@cindex Invoking Automake
@cindex Automake, invoking

To create all the @file{Makefile.in}s for a package, run the
@code{automake} program in the top level directory, with no arguments.
@code{automake} will automatically find each appropriate
@file{Makefile.am} (by scanning @file{configure.in}; @pxref{configure})
and generate the corresponding @file{Makefile.in}.  Note that
@code{automake} has a rather simplistic view of what constitutes a
package; it assumes that a package has only one @file{configure.in}, at
the top.  If your package has multiple @file{configure.in}s, then you
must run @code{automake} in each directory holding a
@file{configure.in}.  (Alteratively, you may rely on Autoconf's
@code{autoreconf}, which is able to recurse your package tree and run
@code{automake} where appropriate.)

You can optionally give @code{automake} an argument; @file{.am} is
appended to the argument and the result is used as the name of the input
file.  This feature is generally only used to automatically rebuild an
out-of-date @file{Makefile.in}.  Note that @code{automake} must always
be run from the topmost directory of a project, even if being used to
regenerate the @file{Makefile.in} in some subdirectory.  This is
necessary because @code{automake} must scan @file{configure.in}, and
because @code{automake} uses the knowledge that a @file{Makefile.in} is
in a subdirectory to change its behavior in some cases.

@cindex Automake options
@cindex Options, Automake
@cindex Strictness, command line

@code{automake} accepts the following options:

@cindex Extra files distributed with Automake
@cindex Files distributed with Automake
@cindex config.guess

@table @samp
@item -a
@itemx --add-missing
@opindex -a
@opindex --add-missing
Automake requires certain common files to exist in certain situations;
for instance @file{config.guess} is required if @file{configure.in} runs
@code{AC_CANONICAL_HOST}.  Automake is distributed with several of these
files (@pxref{Auxiliary Programs}); this option will cause the missing
ones to be automatically added to the package, whenever possible.  In
general if Automake tells you a file is missing, try using this option.
By default Automake tries to make a symbolic link pointing to its own
copy of the missing file; this can be changed with @code{--copy}.

@item --libdir=@var{dir}
@opindex --libdir
Look for Automake data files in directory @var{dir} instead of in the
installation directory.  This is typically used for debugging.

@item -c
@opindex -c
@itemx --copy
@opindex --copy
When used with @code{--add-missing}, causes installed files to be
copied.  The default is to make a symbolic link.

@item --cygnus
@opindex --cygnus
Causes the generated @file{Makefile.in}s to follow Cygnus rules, instead
of GNU or Gnits rules.  For more information, see @ref{Cygnus}.

@item -f
@opindex -f
@itemx --force-missing
@opindex --force-missing
When used with @code{--add-missing}, causes standard files to be reinstalled
even if they already exist in the source tree.  This involves removing
the file from the source tree before creating the new symlink (or, with
@code{--copy}, copying the new file).

@item --foreign
@opindex --foreign
Set the global strictness to @samp{foreign}.  For more information, see
@ref{Strictness}.

@item --gnits
@opindex --gnits
Set the global strictness to @samp{gnits}.  For more information, see
@ref{Gnits}.

@item --gnu
@opindex --gnu
Set the global strictness to @samp{gnu}.  For more information, see
@ref{Gnits}.  This is the default strictness.

@item --help
@opindex --help
Print a summary of the command line options and exit.

@item -i
@itemx --ignore-deps
@opindex -i
This disables the dependency tracking feature in generated
@file{Makefile}s; see @ref{Dependencies}.

@item --include-deps
@opindex --include-deps
This enables the dependency tracking feature.  This feature is enabled
by default.  This option is provided for historical reasons only and
probably should not be used.

@item --no-force
@opindex --no-force
Ordinarily @code{automake} creates all @file{Makefile.in}s mentioned in
@file{configure.in}.  This option causes it to only update those
@file{Makefile.in}s which are out of date with respect to one of their
dependents.

@item -o @var{dir}
@itemx --output-dir=@var{dir}
@opindex -o
@opindex --output-dir
Put the generated @file{Makefile.in} in the directory @var{dir}.
Ordinarily each @file{Makefile.in} is created in the directory of the
corresponding @file{Makefile.am}.  This option is deprecated and will be
removed in a future release.

@item -v
@itemx --verbose
@opindex -v
@opindex --verbose
Cause Automake to print information about which files are being read or
created.

@item --version
@opindex --version
Print the version number of Automake and exit.

@item --Werror
@itemx --Wno-error
@opindex --Werror
@opindex --Wno-error
@samp{--Werror} will cause all warnings issued by @code{automake} to
become errors.  Errors affect the exit status of @code{automake}, while
warnings do not.  @samp{--Wno-error}, the default, causes warnings to be
treated as warnings only.
@end table


@node configure, Top level, Invoking Automake, Top
@chapter Scanning @file{configure.in}

@cindex configure.in, scanning
@cindex Scanning configure.in

Automake scans the package's @file{configure.in} to determine certain
information about the package.  Some @code{autoconf} macros are required
and some variables must be defined in @file{configure.in}.  Automake
will also use information from @file{configure.in} to further tailor its
output.

Automake also supplies some Autoconf macros to make the maintenance
easier.  These macros can automatically be put into your
@file{aclocal.m4} using the @code{aclocal} program.

@menu
* Requirements::                Configuration requirements
* Optional::                    Other things Automake recognizes
* Invoking aclocal::            Auto-generating aclocal.m4
* Macros::                      Autoconf macros supplied with Automake
* Extending aclocal::           Writing your own aclocal macros
@end menu


@node Requirements, Optional, configure, configure
@section Configuration requirements

@cindex Automake requirements
@cindex Requirements of Automake

The one real requirement of Automake is that your @file{configure.in}
call @code{AM_INIT_AUTOMAKE}.  This macro does several things which are
required for proper Automake operation (@pxref{Macros}).
@cvindex AM_INIT_AUTOMAKE

Here are the other macros which Automake requires but which are not run
by @code{AM_INIT_AUTOMAKE}:

@cindex AC_OUTPUT, scanning

@table @code
@item AC_CONFIG_FILES
@itemx AC_OUTPUT
Automake uses these to determine which files to create (@pxref{Output, ,
Creating Output Files, autoconf, The Autoconf Manual}).  A listed file
is considered to be an Automake generated @file{Makefile} if there
exists a file with the same name and the @file{.am} extension appended.
Typically, @code{AC_CONFIG_FILES([foo/Makefile])} will cause Automake to
generate @file{foo/Makefile.in} if @file{foo/Makefile.am} exists.

Other listed files are treated differently.  Currently the only
difference is that an Automake @file{Makefile} is removed by @code{make
distclean}, while other files are removed by @code{make clean}.
@c FIXME: this is in violation of standards!
@cvindex AC_OUTPUT
@end table


@node Optional, Invoking aclocal, Requirements, configure
@section Other things Automake recognizes

@cindex Macros Automake recognizes
@cindex Recognized macros by Automake

Automake will also recognize the use of certain macros and tailor the
generated @file{Makefile.in} appropriately.  Currently recognized macros
and their effects are:

@table @code
@item AC_CONFIG_HEADER
Automake requires the use of @code{AM_CONFIG_HEADER} (@pxref{Macros}),
which is similar to @code{AC_CONFIG_HEADER} (@pxref{Configuration
Headers, , Configuration Header Files, autoconf, The Autoconf Manual}),
but does some useful Automake-specific work.
@cvindex AC_CONFIG_HEADER

@item AC_CONFIG_AUX_DIR
Automake will look for various helper scripts, such as
@file{mkinstalldirs}, in the directory named in this macro invocation.
If not seen, the scripts are looked for in their @samp{standard}
locations (either the top source directory, or in the source directory
corresponding to the current @file{Makefile.am}, whichever is
appropriate).  @xref{Input, , Finding `configure' Input, autoconf, The
Autoconf Manual}.
@cvindex AC_CONFIG_AUX_DIR
FIXME: give complete list of things looked for in this directory

@item AC_PATH_XTRA
Automake will insert definitions for the variables defined by
@code{AC_PATH_XTRA} into each @file{Makefile.in} that builds a C program
or library.  @xref{System Services, , System Services, autoconf, The
Autoconf Manual}.
@cvindex AC_PATH_XTRA

@item AC_CANONICAL_HOST
Automake will ensure that @file{config.guess} and @file{config.sub}
exist.  Also, the @file{Makefile} variables @samp{host_alias} and
@samp{host_triplet} are introduced.  See @ref{Canonicalizing, ,
Getting the Canonical System Type, autoconf, The Autoconf Manual}.
@cvindex AC_CANONICAL_HOST
@vindex host_alias
@vindex host_triplet

@item AC_CANONICAL_SYSTEM
This is similar to @code{AC_CANONICAL_HOST}, but also defines the
@file{Makefile} variables @samp{build_alias} and @samp{target_alias}.
@xref{Canonicalizing, , Getting the Canonical System Type, autoconf, The
Autoconf Manual}.
@cvindex AC_CANONICAL_SYSTEM
@vindex build_alias
@vindex target_alias

@item  AC_FUNC_ALLOCA
@itemx AC_FUNC_ERROR_AT_LINE
@itemx AC_FUNC_FNMATCH
@itemx AC_FUNC_GETLOADAVG
@itemx AC_FUNC_MEMCMP
@itemx AC_FUNC_MKTIME
@itemx AC_FUNC_OBSTACK
@itemx AC_FUNC_STRTOD
@itemx AC_REPLACE_FUNCS
@itemx AC_REPLACE_GNU_GETOPT
@itemx AC_STRUCT_ST_BLOCKS
@itemx AM_WITH_REGEX
Automake will ensure that the appropriate dependencies are generated for
the objects corresponding to these macros.  Also, Automake will verify
that the appropriate source files are part of the distribution.  Note
that Automake does not come with any of the C sources required to use
these macros, so @code{automake -a} will not install the sources.
@xref{A Library}, for more information.  Also, see @ref{Particular
Functions, , Particular Function Checks, autoconf, The Autoconf Manual}.
@cvindex AC_FUNC_ALLOCA
@cvindex AC_FUNC_ERROR_AT_LINE
@cvindex AC_FUNC_FNMATCH
@cvindex AC_FUNC_GETLOADAVG
@cvindex AC_FUNC_MEMCMP
@cvindex AC_FUNC_MKTIME
@cvindex AC_FUNC_OBSTACK
@cvindex AC_FUNC_STRTOD
@cvindex AC_REPLACE_FUNCS
@cvindex AC_REPLACE_GNU_GETOPT
@cvindex AC_STRUCT_ST_BLOCKS
@cvindex AM_WITH_REGEX

@item AC_LIBOBJ
@itemx LIBOBJS
@itemx AC_LIBSOURCE
@itemx AC_LIBSOURCES
Automake will detect statements which put @file{.o} files into
@code{LIBOBJS}, or pass @file{.o} files to @code{AC_LIBOBJ}, and will
treat these additional files as if they were discovered via
@code{AC_REPLACE_FUNCS}.  Similarly, Automake will also distribute file
listed in @code{AC_LIBSOURCE} and @code{AC_LIBSOURCES}.

Note that assignments to @code{LIBOBJS} is a construct which is being
phased out; they will be ignored in a future release of Automake.  You
should call the @code{AC_LIBOBJ} macro instead.  @xref{Generic
Functions, , Generic Function Checks, autoconf, The Autoconf Manual}.

@cvindex AC_LIBOBJ
@cvindex AC_LIBSOURCE
@cvindex AC_LIBSOURCES
@cvindex LIBOBJS

@item AC_PROG_RANLIB
This is required if any libraries are built in the package.
@xref{Particular Programs, , Particular Program Checks, autoconf, The
Autoconf Manual}.
@cvindex AC_PROG_RANLIB

@item AC_PROG_CXX
This is required if any C++ source is included.  @xref{Particular
Programs, , Particular Program Checks, autoconf, The Autoconf Manual}.
@cvindex AC_PROG_CXX

@item AC_PROG_F77
This is required if any Fortran 77 source is included.  This macro is
distributed with Autoconf version 2.13 and later.  @xref{Particular
Programs, , Particular Program Checks, autoconf, The Autoconf Manual}.
@cvindex AC_PROG_F77

@item AC_F77_LIBRARY_LDFLAGS
This is required for programs and shared libraries that are a mixture of
languages that include Fortran 77 (@pxref{Mixing Fortran 77 With C and
C++}).  @xref{Macros, , Autoconf macros supplied with Automake}.
@cvindex AC_F77_LIBRARY_LDFLAGS

@item AC_PROG_LIBTOOL
Automake will turn on processing for @code{libtool} (@pxref{Top, ,
Introduction, libtool, The Libtool Manual}).
@cvindex AC_PROG_LIBTOOL

@item AC_PROG_YACC
If a Yacc source file is seen, then you must either use this macro or
define the variable @samp{YACC} in @file{configure.in}.  The former is
preferred (@pxref{Particular Programs, , Particular Program Checks,
autoconf, The Autoconf Manual}).
@cvindex AC_PROG_YACC
@cvindex YACC

@item AC_PROG_LEX
If a Lex source file is seen, then this macro must be used.
@xref{Particular Programs, , Particular Program Checks, autoconf, The
Autoconf Manual}.
@cvindex AC_PROG_LEX

@item AM_C_PROTOTYPES
This is required when using automatic de-ANSI-fication; see @ref{ANSI}.
@cvindex AM_C_PROTOTYPES

@item AM_GNU_GETTEXT
This macro is required for packages which use GNU gettext
(@pxref{gettext}).  It is distributed with gettext.  If Automake sees
this macro it ensures that the package meets some of gettext's
requirements.
@cvindex AM_GNU_GETTEXT

@item AM_MAINTAINER_MODE
@opindex --enable-maintainer-mode
This macro adds a @samp{--enable-maintainer-mode} option to
@code{configure}.  If this is used, @code{automake} will cause
@samp{maintainer-only} rules to be turned off by default in the
generated @file{Makefile.in}s. This macro defines the
@samp{MAINTAINER_MODE} conditional, which you can use in your own
@file{Makefile.am}.
@cvindex AM_MAINTAINER_MODE

@item AC_SUBST
@itemx AC_CHECK_TOOL
@itemx AC_CHECK_PROG
@itemx AC_CHECK_PROGS
@itemx AC_PATH_PROG
@itemx AC_PATH_PROGS
For each of these macros, the first argument is automatically defined as
a variable in each generated @file{Makefile.in}.  @xref{Setting Output
Variables, , Setting Output Variables, autoconf, The Autoconf Manual},
and @ref{Generic Programs, , Generic Program Checks, autoconf, The
Autoconf Manual}.
@cvindex AC_SUBST
@cvindex AC_CHECK_TOOL
@cvindex AC_CHECK_PROG
@cvindex AC_CHECK_PROGS
@cvindex AC_PATH_PROG
@cvindex AC_PATH_PROGS

@end table


@node Invoking aclocal, Macros, Optional, configure
@section Auto-generating aclocal.m4

@cindex Invoking aclocal
@cindex aclocal, Invoking

Automake includes a number of Autoconf macros which can be used in your
package; some of them are actually required by Automake in certain
situations.  These macros must be defined in your @file{aclocal.m4};
otherwise they will not be seen by @code{autoconf}.

The @code{aclocal} program will automatically generate @file{aclocal.m4}
files based on the contents of @file{configure.in}.  This provides a
convenient way to get Automake-provided macros, without having to
search around.  Also, the @code{aclocal} mechanism allows other packages
to supply their own macros.

At startup, @code{aclocal} scans all the @file{.m4} files it can find,
looking for macro definitions.  Then it scans @file{configure.in}.  Any
mention of one of the macros found in the first step causes that macro,
and any macros it in turn requires, to be put into @file{aclocal.m4}.

The contents of @file{acinclude.m4}, if it exists, are also
automatically included in @file{aclocal.m4}.  This is useful for
incorporating local macros into @file{configure}.

@code{aclocal} tries to be smart about looking for new @code{AC_DEFUN}s
in the files it scans.  It also
tries to copy the full text of the scanned file into @file{aclocal.m4},
including both @samp{#} and @samp{dnl} comments.  If you want to make a
comment which will be completely ignored by @code{aclocal}, use
@samp{##} as the comment leader.

@code{aclocal} accepts the following options:

@table @code
@item --acdir=@var{dir}
@opindex --acdir
Look for the macro files in @var{dir} instead of the installation
directory.  This is typically used for debugging.

@item --help
@opindex --help
Print a summary of the command line options and exit.

@item -I @var{dir}
@opindex -I
Add the directory @var{dir} to the list of directories searched for
@file{.m4} files.

@item --output=@var{file}
@opindex --output
Cause the output to be put into @var{file} instead of @file{aclocal.m4}.

@item --print-ac-dir
@opindex --print-ac-dir
Prints the name of the directory which @code{aclocal} will search to
find third-party @file{.m4} files.  When this option is given, normal
processing is suppressed.  This option can be used by a package to
determine where to install a macro file.

@item --verbose
@opindex --verbose
Print the names of the files it examines.

@item --version
@opindex --version
Print the version number of Automake and exit.
@end table


@node Macros, Extending aclocal, Invoking aclocal, configure
@section Autoconf macros supplied with Automake

Automake ships with several Autoconf macros that you can use from your
@file{configure.in}.  When you use one of them it will be included by
@code{aclocal} in @file{aclocal.m4}.

@menu
* Public macros::               Macros that you can use.
* Private macros::              Macros that you should not use.
@end menu

@c consider generating the following subsections automatically from m4 files.

@node Public macros, Private macros, Macros, Macros
@subsection Public macros

@table @code
@item AM_CONFIG_HEADER
Automake will generate rules to automatically regenerate the config
header.
@cvindex AM_CONFIG_HEADER

@item AM_ENABLE_MULTILIB
This is used when a ``multilib'' library is being built.  The first
optional argument is the name of the @file{Makefile} being generated; it
defaults to @samp{Makefile}.  The second option argument is used to find
the top source directory; it defaults to the empty string (generally
this should not be used unless you are familiar with the internals).
@xref{Multilibs}.

@item AM_C_PROTOTYPES
Check to see if function prototypes are understood by the compiler.  If
so, define @samp{PROTOTYPES} and set the output variables @samp{U} and
@samp{ANSI2KNR} to the empty string.  Otherwise, set @samp{U} to
@samp{_} and @samp{ANSI2KNR} to @samp{./ansi2knr}.  Automake uses these
values to implement automatic de-ANSI-fication.
@cvindex AM_C_PROTOTYPES

@item AM_HEADER_TIOCGWINSZ_NEEDS_SYS_IOCTL
If the use of @code{TIOCGWINSZ} requires @file{<sys/ioctl.h>}, then
define @code{GWINSZ_IN_SYS_IOCTL}.  Otherwise @code{TIOCGWINSZ} can be
found in @file{<termios.h>}.
@cvindex AM_HEADER_TIOCGWINSZ_NEEDS_SYS_IOCTL

@item AM_INIT_AUTOMAKE([OPTIONS])
@itemx AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])
Runs many macros required for proper operation of the generated Makefiles.

This macro has two forms, the second of which has two required
arguments: the package and the version number.  This latter form is
obsolete because the @var{package} and @var{version} can be obtained
from Autoconf's @code{AC_INIT} macro (which itself has an old and a new
form).

If your @file{configure.in} has:
@example
AC_INIT(src/foo.c)
AM_INIT_AUTOMAKE(mumble, 1.5)
@end example
you can modernize it as follow:
@example
AC_INIT(mumble, 1.5)
AC_CONFIG_SRCDIR(src/foo.c)
AM_INIT_AUTOMAKE
@end example

Note that if you're upgrading your @file{configure.in} from an earlier
version of Automake, it is not always correct to simply move the package
and version arguments from @code{AM_INIT_AUTOMAKE} directly to
@code{AC_INIT}, as in the example above.  The first argument of
@code{AC_INIT} is the name of your package (e.g. @samp{GNU Automake}),
not the tarball name (e.g. @samp{automake}) you used to pass to
@code{AM_INIT_AUTOMAKE}.  Autoconf's rule to derive a tarball name from
the package name should work for most but not all packages.  Especially,
if your tarball name is not all lower case, you will have to use the
four-argument form of @code{AC_INIT} (supported in Autoconf versions
greater than 2.52g).

When @code{AM_INIT_AUTOMAKE} is called with a single argument, it is
interpreted as a space-separated list of Automake options which should
be applied to every @file{Makefile.am} in the tree.  The effect is as if
each option were listed in @code{AUTOMAKE_OPTIONS}.

By default this macro @code{AC_DEFINE}'s @samp{PACKAGE} and
@samp{VERSION}.  This can be avoided by passing the @samp{no-define}
option, as in:
@example
AM_INIT_AUTOMAKE([gnits 1.5 no-define dist-bzip2])
@end example
or by passing a third non-empty argument to the obsolete form.

@cvindex PACKAGE, prevent definition
@cvindex VERSION, prevent definition


@item AM_PATH_LISPDIR
Searches for the program @code{emacs}, and, if found, sets the output
variable @code{lispdir} to the full path to Emacs' site-lisp directory.

Note that this test assumes the @code{emacs} found to be a version that
supports Emacs Lisp (such as @sc{gnu} Emacs or XEmacs).  Other emacsen
can cause this test to hang (some, like old versions of MicroEmacs,
start up in interactive mode, requiring @samp{C-x C-c} to exit, which
is hardly obvious for a non-emacs user).  In most cases, however, you
should be able to use @samp{C-c} to kill the test.  In order to avoid
problems, you can set @code{EMACS} to ``no'' in the environment, or
use the @samp{--with-lispdir} option to @command{configure} to
explictly set the correct path (if you're sure you have an @code{emacs}
that supports Emacs Lisp.
@cvindex AM_PATH_LISPDIR

@item AM_PROG_AS
Use this macro when you have assembly code in your project.  This will
choose the assembler for you (by default the C compiler) and set
@code{CCAS}, and will also set @code{CCASFLAGS} if required.

@item AM_PROG_CC_C_O
This is like @code{AC_PROG_CC_C_O}, but it generates its results in the
manner required by automake.  You must use this instead of
@code{AC_PROG_CC_C_O} when you need this functionality.

@item AM_PROG_CC_STDC
If the C compiler is not in ANSI C mode by default, try to add an option
to output variable @code{CC} to make it so.  This macro tries various
options that select ANSI C on some system or another.  It considers the
compiler to be in ANSI C mode if it handles function prototypes correctly.

If you use this macro, you should check after calling it whether the C
compiler has been set to accept ANSI C; if not, the shell variable
@code{am_cv_prog_cc_stdc} is set to @samp{no}.  If you wrote your source
code in ANSI C, you can make an un-ANSIfied copy of it by using the
@code{ansi2knr} option (@pxref{ANSI}).

@item AM_PROG_LEX
@cindex HP-UX 10, lex problems
@cindex lex problems with HP-UX 10
Like @code{AC_PROG_LEX} (@pxref{Particular Programs, , Particular
Program Checks, autoconf, The Autoconf Manual}), but uses the
@code{missing} script on systems that do not have @code{lex}.
@samp{HP-UX 10} is one such system.

@item AM_PROG_GCJ
This macro finds the @code{gcj} program or causes an error.  It sets
@samp{GCJ} and @samp{GCJFLAGS}.  @code{gcj} is the Java front-end to the
GNU Compiler Collection.
@cvindex AM_PROG_GCJ

@item AM_SYS_POSIX_TERMIOS
@cvindex am_cv_sys_posix_termios
@cindex POSIX termios headers
@cindex termios POSIX headers
Check to see if POSIX termios headers and functions are available on the
system.  If so, set the shell variable @code{am_cv_sys_posix_termios} to
@samp{yes}.  If not, set the variable to @samp{no}.

@item AM_WITH_DMALLOC
@cvindex WITH_DMALLOC
@cindex dmalloc, support for
@opindex --with-dmalloc
Add support for the
@uref{ftp://ftp.letters.com/src/dmalloc/dmalloc.tar.gz, dmalloc}
package.  If the user configures with @samp{--with-dmalloc}, then define
@code{WITH_DMALLOC} and add @samp{-ldmalloc} to @code{LIBS}.

@item AM_WITH_REGEX
@cvindex WITH_REGEX
@opindex --with-regex
@cindex regex package
@cindex rx package
Adds @samp{--with-regex} to the @code{configure} command line.  If
specified (the default), then the @samp{regex} regular expression
library is used, @file{regex.o} is put into @samp{LIBOBJS}, and
@samp{WITH_REGEX} is defined.  If @samp{--without-regex} is given, then
the @samp{rx} regular expression library is used, and @file{rx.o} is put
into @samp{LIBOBJS}.

@end table

@node Private macros,  , Public macros, Macros
@subsection Private macros

The following macros are private macros you should not call directly.
They are called by the other public macros when appropriate.  Do not
rely on them, as they might be changed in a future version.  Consider
them as implementation details; or better, do not consider them at all:
skip this section!

@table @code
@item _AM_DEPENDENCIES
@itemx AM_SET_DEPDIR
@itemx AM_DEP_TRACK
@itemx AM_OUTPUT_DEPENDENCY_COMMANDS
These macros are used to implement automake's automatic dependency
tracking scheme.  They are called automatically by automake when
required, and there should be no need to invoke them manually.

@item AM_MAKE_INCLUDE
This macro is used to discover how the user's @code{make} handles
@code{include} statements.  This macro is automatically invoked when
needed; there should be no need to invoke it manually.

@item AM_PROG_INSTALL_STRIP
This is used to find a version of @code{install} which can be used to
@code{strip} a program at installation time.  This macro is
automatically included when required.

@item AM_SANITY_CHECK
This checks to make sure that a file created in the build directory is
newer than a file in the source directory.  This can fail on systems
where the clock is set incorrectly.  This macro is automatically run
from @code{AM_INIT_AUTOMAKE}.

@end table



@node Extending aclocal,  , Macros, configure
@section Writing your own aclocal macros

@cindex aclocal, extending
@cindex Extending aclocal

The @code{aclocal} program doesn't have any built-in knowledge of any
macros, so it is easy to extend it with your own macros.

This is mostly used for libraries which want to supply their own
Autoconf macros for use by other programs.  For instance the
@code{gettext} library supplies a macro @code{AM_GNU_GETTEXT} which
should be used by any package using @code{gettext}.  When the library is
installed, it installs this macro so that @code{aclocal} will find it.

A file of macros should be a series of @code{AC_DEFUN}'s.  The
@code{aclocal} programs also understands @code{AC_REQUIRE}, so it is
safe to put each macro in a separate file.  @xref{Prerequisite Macros, ,
, autoconf, The Autoconf Manual}, and @ref{Macro Definitions, , ,
autoconf, The Autoconf Manual}.

A macro file's name should end in @file{.m4}.  Such files should be
installed in @code{`aclocal --print-ac-dir`} (which usually happens to
be @file{$(datadir)/aclocal}).


@node Top level, Alternative, configure, Top
@chapter The top-level @file{Makefile.am}

@cindex SUBDIRS, explained

In packages with subdirectories, the top level @file{Makefile.am} must
tell Automake which subdirectories are to be built.  This is done via
the @code{SUBDIRS} variable.
@vindex SUBDIRS

The @code{SUBDIRS} macro holds a list of subdirectories in which
building of various sorts can occur.  Many targets (e.g. @code{all}) in
the generated @file{Makefile} will run both locally and in all specified
subdirectories.  Note that the directories listed in @code{SUBDIRS} are
not required to contain @file{Makefile.am}s; only @file{Makefile}s
(after configuration).  This allows inclusion of libraries from packages
which do not use Automake (such as @code{gettext}).  The directories
mentioned in @code{SUBDIRS} must be direct children of the current
directory.  For instance, you cannot put @samp{src/subdir} into
@code{SUBDIRS}.

In packages that use subdirectories, the top-level @file{Makefile.am} is
often very short.  For instance, here is the @file{Makefile.am} from the
GNU Hello distribution:

@example
EXTRA_DIST = BUGS ChangeLog.O README-alpha
SUBDIRS = doc intl po src tests
@end example

@cindex SUBDIRS, overriding
@cindex Overriding SUBDIRS

It is possible to override the @code{SUBDIRS} variable if, like in the
case of GNU @code{Inetutils}, you want to only build a subset of the
entire package.  In your @file{Makefile.am} include:

@example
SUBDIRS = @@MY_SUBDIRS@@
@end example

Then in your @file{configure.in} you can specify:

@example
MY_SUBDIRS="src doc lib po"
AC_SUBST(MY_SUBDIRS)
@end example

(Note that we don't use the variable name @code{SUBDIRS} in our
@file{configure.in}; that would cause Automake to believe that every
@file{Makefile.in} should recurse into the listed subdirectories.)

The upshot of this is that Automake is tricked into building the package
to take the subdirs, but doesn't actually bind that list until
@code{configure} is run.

Although the @code{SUBDIRS} macro can contain configure substitutions
(e.g. @samp{@@DIRS@@}); Automake itself does not actually examine the
contents of this variable.

If @code{SUBDIRS} is defined, then your @file{configure.in} must include
@code{AC_PROG_MAKE_SET}.  When Automake invokes @code{make} in a
subdirectory, it uses the value of the @code{MAKE} variable.  It passes
the value of the variable @code{AM_MAKEFLAGS} to the @code{make}
invocation; this can be set in @file{Makefile.am} if there are flags you
must always pass to @code{make}.
@vindex MAKE
@vindex MAKEFLAGS

The use of @code{SUBDIRS} is not restricted to just the top-level
@file{Makefile.am}.  Automake can be used to construct packages of
arbitrary depth.

By default, Automake generates @file{Makefiles} which work depth-first
(@samp{postfix}).  However, it is possible to change this ordering.  You
can do this by putting @samp{.} into @code{SUBDIRS}.  For instance,
putting @samp{.}  first will cause a @samp{prefix} ordering of
directories.  All @samp{clean} targets are run in reverse order of build
targets.

Sometimes, such as when running @code{make dist}, you want all possible
subdirectories to be examined.  In this case Automake will use
@code{DIST_SUBDIRS}, instead of @code{SUBDIRS}, to determine where to
recurse.  This variable will also be used when the user runs
@code{distclean} or @code{maintainer-clean}.  It should be set to the
full list of subdirectories in the project.  If this macro is not set,
Automake will attempt to set it for you.


@node Alternative, Rebuilding, Top level, Top
@chapter An Alternative Approach to Subdirectories

If you've ever read Peter Miller's excellent paper,
@uref{http://www.pcug.org.au/~millerp/rmch/recu-make-cons-harm.html,
Recursive Make Considered Harmful}, the preceding section on the use of
subdirectories will probably come as unwelcome advice.  For those who
haven't read the paper, Miller's main thesis is that recursive
@code{make} invocations are both slow and error-prone.

Automake provides sufficient cross-directory support @footnote{We
believe.  This work is new and there are probably warts.
@xref{Introduction}, for information on reporting bugs.} to enable you
to write a single @file{Makefile.am} for a complex multi-directory
package.


By default an installable file specified in a subdirectory will have its
directory name stripped before installation.  For instance, in this
example, the header file will be installed as
@file{$(includedir)/stdio.h}:

@example
include_HEADERS = inc/stdio.h
@end example

@cindex nobase_
@cindex Path stripping, avoiding
@cindex Avoiding path stripping

However, the @samp{nobase_} prefix can be used to circumvent this path
stripping.  In this example, the header file will be installed as
@file{$(includedir)/sys/types.h}:

@example
nobase_include_HEADERS = sys/types.h
@end example

@cindex nobase_ and dist_ or nodist_
@cindex dist_ and nobase_
@cindex nodist_ and nobase_

@samp{nobase_} should be specified first when used in conjonction with
either @samp{dist_} or @samp{nodist_} (@pxref{Dist}).  For instance:

@example
nobase_dist_pkgdata_DATA = images/vortex.pgm
@end example

@node Rebuilding, Programs, Alternative, Top
@chapter Rebuilding Makefiles

Automake generates rules to automatically rebuild @file{Makefile}s,
@file{configure}, and other derived files like @file{Makefile.in}.

If you are using @code{AM_MAINTAINER_MODE} in @file{configure.in}, then
these automatic rebuilding rules are only enabled in maintainer mode.

Sometimes you need to run @code{aclocal} with an argument like @code{-I}
to tell it where to find @file{.m4} files.  Since sometimes @code{make}
will automatically run @code{aclocal}, you need a way to specify these
arguments.  You can do this by defining @code{ACLOCAL_AMFLAGS}; this
holds arguments which are passed verbatim to @code{aclocal}.  This macro
is only useful in the top-level @file{Makefile.am}.
@vindex ACLOCAL_AMFLAGS


@node Programs, Other objects, Rebuilding, Top
@chapter Building Programs and Libraries

A large part of Automake's functionality is dedicated to making it easy
to build programs and libraries.

@menu
* A Program::                   Building a program
* A Library::                   Building a library
* A Shared Library::            Building a Libtool library
* Program and Library Variables::  Variables controlling program and
                                library builds
* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA
* Program variables::           Variables used when building a program
* Yacc and Lex::                Yacc and Lex support
* C++ Support::
* Assembly Support::
* Fortran 77 Support::
* Java Support::
* Support for Other Languages::
* ANSI::                        Automatic de-ANSI-fication
* Dependencies::                Automatic dependency tracking
* EXEEXT::                      Support for executable extensions
@end menu


@node A Program, A Library, Programs, Programs
@section Building a program

In order to build a program, you need to tell Automake which sources
are part of it, and which libraries it should be linked with.

This section also covers conditional compilation of sources or
programs.  Most of the comments about these also apply to libraries
(@pxref{A Library}) and Libtool libraries (@pxref{A Shared Library}).

@menu
* Program Sources::             Defining program sources
* Linking::                     Linking with libraries or extra objects
* Conditional Sources::         Handling conditional sources
* Conditional Programs::        Building program conditionally
@end menu

@node Program Sources, Linking, A Program, A Program
@subsection Defining program sources

@cindex PROGRAMS, bindir
@vindex bin_PROGRAMS
@vindex sbin_PROGRAMS
@vindex libexec_PROGRAMS
@vindex pkglib_PROGRAMS
@vindex noinst_PROGRAMS
@vindex check_PROGRAMS

In a directory containing source that gets built into a program (as
opposed to a library or a script), the @samp{PROGRAMS} primary is used.
Programs can be installed in @code{bindir}, @code{sbindir},
@code{libexecdir}, @code{pkglibdir}, or not at all (@samp{noinst}).
They can also be built only for @code{make check}, in which case the
prefix is @samp{check}.

For instance:

@example
bin_PROGRAMS = hello
@end example

In this simple case, the resulting @file{Makefile.in} will contain code
to generate a program named @code{hello}.

Associated with each program are several assisting variables which are
named after the program.  These variables are all optional, and have
reasonable defaults.  Each variable, its use, and default is spelled out
below; we use the ``hello'' example throughout.

The variable @code{hello_SOURCES} is used to specify which source files
get built into an executable:

@example
hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h
@end example

This causes each mentioned @samp{.c} file to be compiled into the
corresponding @samp{.o}.  Then all are linked to produce @file{hello}.

@cindex _SOURCES primary, defined
@cindex SOURCES primary, defined
@cindex Primary variable, SOURCES

If @samp{hello_SOURCES} is not specified, then it defaults to the single
file @file{hello.c}; that is, the default is to compile a single C file
whose base name is the name of the program itself.  (This is a terrible
default but we are stuck with it for historical reasons.)
@vindex _SOURCES
@vindex SOURCES

Multiple programs can be built in a single directory.  Multiple programs
can share a single source file, which must be listed in each
@samp{_SOURCES} definition.

@cindex Header files in _SOURCES
@cindex _SOURCES and header files

Header files listed in a @samp{_SOURCES} definition will be included in
the distribution but otherwise ignored.  In case it isn't obvious, you
should not include the header file generated by @file{configure} in a
@samp{_SOURCES} variable; this file should not be distributed.  Lex
(@samp{.l}) and Yacc (@samp{.y}) files can also be listed; see @ref{Yacc
and Lex}.


@node Linking, Conditional Sources, Program Sources, A Program
@subsection Linking the program

If you need to link against libraries that are not found by
@code{configure}, you can use @code{LDADD} to do so.  This variable is
used to specify additional objects or libraries to link with; it is
inappropriate for specifying specific linker flags, you should use
@code{AM_LDFLAGS} for this purpose.
@vindex LDADD
@vindex AM_LDFLAGS

@cindex prog_LDADD, defined

Sometimes, multiple programs are built in one directory but do not share
the same link-time requirements.  In this case, you can use the
@samp{@var{prog}_LDADD} variable (where @var{prog} is the name of the
program as it appears in some @samp{_PROGRAMS} variable, and usually
written in lowercase) to override the global @code{LDADD}.  If this
variable exists for a given program, then that program is not linked
using @code{LDADD}.
@vindex _LDADD

For instance, in GNU cpio, @code{pax}, @code{cpio} and @code{mt} are
linked against the library @file{libcpio.a}.  However, @code{rmt} is
built in the same directory, and has no such link requirement.  Also,
@code{mt} and @code{rmt} are only built on certain architectures.  Here
is what cpio's @file{src/Makefile.am} looks like (abridged):

@example
bin_PROGRAMS = cpio pax @@MT@@
libexec_PROGRAMS = @@RMT@@
EXTRA_PROGRAMS = mt rmt

LDADD = ../lib/libcpio.a @@INTLLIBS@@
rmt_LDADD =

cpio_SOURCES = @dots{}
pax_SOURCES = @dots{}
mt_SOURCES = @dots{}
rmt_SOURCES = @dots{}
@end example

@cindex _LDFLAGS, defined

@samp{@var{prog}_LDADD} is inappropriate for passing program-specific
linker flags (except for @samp{-l}, @samp{-L}, @samp{-dlopen} and
@samp{-dlpreopen}).  So, use the @samp{@var{prog}_LDFLAGS} variable for
this purpose.
@vindex _LDFLAGS

@cindex _DEPENDENCIES, defined

It is also occasionally useful to have a program depend on some other
target which is not actually part of that program.  This can be done
using the @samp{@var{prog}_DEPENDENCIES} variable.  Each program depends
on the contents of such a variable, but no further interpretation is
done.

If @samp{@var{prog}_DEPENDENCIES} is not supplied, it is computed by
Automake.  The automatically-assigned value is the contents of
@samp{@var{prog}_LDADD}, with most configure substitutions, @samp{-l},
@samp{-L}, @samp{-dlopen} and @samp{-dlpreopen} options removed.  The
configure substitutions that are left in are only @samp{@@LIBOBJS@@} and
@samp{@@ALLOCA@@}; these are left because it is known that they will not
cause an invalid value for @samp{@var{prog}_DEPENDENCIES} to be
generated.


@node Conditional Sources, Conditional Programs, Linking, A Program
@subsection Conditional compilation of sources

You can't put a configure substitution (e.g., @samp{@@FOO@@}) into a
@samp{_SOURCES} variable.  The reason for this is a bit hard to explain,
but suffice to say that it simply won't work.  Automake will give an
error if you try to do this.

Fortunatly there are two other ways to achieve the same result.  One is
to use configure substitutions in @code{_LDADD} variables, the other is
to use an Automake conditional.

@subsubsection Conditional compilation using @code{_LDADD} substitutions

@cindex EXTRA_prog_SOURCES, defined

Automake must know all the source files that could possibly go into a
program, even if not all the files are built in every circumstance.  Any
files which are only conditionally built should be listed in the
appropriate @samp{EXTRA_} variable.  For instance, if
@file{hello-linux.c} or @file{hello-generic.c} were conditionally included
in @code{hello}, the @file{Makefile.am} would contain:

@example
bin_PROGRAMS = hello
hello_SOURCES = hello-common.c
EXTRA_hello_SOURCES = hello-linux.c hello-generic.c
hello_LDADD = @@HELLO_SYSTEM@@
hello_DEPENDENCIES = @@HELLO_SYSTEM@@
@end example

@noindent
You can then setup the @code{@@HELLO_SYSTEM@@} substitution from
@file{configure.in}:

@example
...
case $host in
  *linux*) HELLO_SYSTEM='hello-linux.$(OBJEXT)' ;;
  *)       HELLO_SYSTEM='hello-generic.$(OBJEXT)' ;;
esac
AC_SUBST([HELLO_SYSTEM])
...
@end example

In this case, @code{HELLO_SYSTEM} should be replaced by
@file{hello-linux.o} or @file{hello-bsd.o}, and added to
@code{hello_DEPENDENCIES} and @code{hello_LDADD} in order to be built
and linked in.

@subsubsection Conditional compilation using Automake conditionals

An often simpler way to compile source files conditionally is to use
Automake conditionals.  For instance, you could use this
@file{Makefile.am} construct to build the same @file{hello} example:

@example
bin_PROGRAMS = hello
if LINUX
hello_SOURCES = hello-linux.c hello-common.c
else
hello_SOURCES = hello-generic.c hello-common.c
endif
@end example

In this case, your @file{configure.in} should setup the @code{LINUX}
conditional using @code{AM_CONDITIONAL} (@pxref{Conditionals}).

When using conditionals like this you don't need to use the
@samp{EXTRA_} variable, because Automake will examine the contents of
each variable to construct the complete list of source files.

If your program uses a lot of files, you will probably prefer to use an
intermediate variable to hold conditional sources.

@example
bin_PROGRAMS = hello
if LINUX
hello_cond = hello-linux.c
else
hello_cond = hello-generic.c
endif
hello_SOURCES = hello-common.c $(hello_cond)
@end example

@node Conditional Programs,  , Conditional Sources, A Program
@subsection Conditional compilation of programs

Sometimes it is useful to determine the programs that are to be built at
configure time.  For instance, GNU @code{cpio} only builds @code{mt} and
@code{rmt} under special circumstances.

@cindex EXTRA_PROGRAMS, defined

In this case, you must notify Automake of all the programs that can
possibly be built, but at the same time cause the generated
@file{Makefile.in} to use the programs specified by @code{configure}.
This is done by having @code{configure} substitute values into each
@samp{_PROGRAMS} definition, while listing all optionally built programs
in @code{EXTRA_PROGRAMS}.
@vindex EXTRA_PROGRAMS

Of course you can use Automake conditionals to determine the programs to
be built.


@node A Library, A Shared Library, A Program, Programs
@section Building a library

@cindex _LIBRARIES primary, defined
@cindex LIBRARIES primary, defined
@cindex Primary variable, LIBRARIES

@vindex lib_LIBRARIES
@vindex pkglib_LIBRARIES
@vindex noinst_LIBRARIES

Building a library is much like building a program.  In this case, the
name of the primary is @samp{LIBRARIES}.  Libraries can be installed in
@code{libdir} or @code{pkglibdir}.

@xref{A Shared Library}, for information on how to build shared
libraries using Libtool and the @samp{LTLIBRARIES} primary.

Each @samp{_LIBRARIES} variable is a list of the libraries to be built.
For instance to create a library named @file{libcpio.a}, but not install
it, you would write:

@example
noinst_LIBRARIES = libcpio.a
@end example

The sources that go into a library are determined exactly as they are
for programs, via the @samp{_SOURCES} variables.  Note that the library
name is canonicalized (@pxref{Canonicalization}), so the @samp{_SOURCES}
variable corresponding to @file{liblob.a} is @samp{liblob_a_SOURCES},
not @samp{liblob.a_SOURCES}.

@cindex _LIBADD primary, defined
@cindex LIBADD primary, defined
@cindex Primary variable, LIBADD

Extra objects can be added to a library using the
@samp{@var{library}_LIBADD} variable.  This should be used for objects
determined by @code{configure}.  Again from @code{cpio}:
@vindex _LIBADD
@vindex LIBADD

@example
libcpio_a_LIBADD = @@LIBOBJS@@ @@ALLOCA@@
@end example

In addition, sources for extra objects that will not exist until
configure-time must be added to the @code{BUILT_SOURCES} variable
(@pxref{Sources}).


@node A Shared Library, Program and Library Variables, A Library, Programs
@section Building a Shared Library

@cindex Shared libraries, support for

Building shared libraries is a relatively complex matter.  For this
reason, GNU Libtool (@pxref{Top, , Introduction, libtool, The
Libtool Manual}) was created to help build shared libraries in a
platform-independent way.

@cindex _LTLIBRARIES primary, defined
@cindex LTLIBRARIES primary, defined
@cindex Primary variable, LTLIBRARIES
@cindex Example of shared libraries

@cindex suffix .la, defined

Automake uses Libtool to build libraries declared with the
@samp{LTLIBRARIES} primary.  Each @samp{_LTLIBRARIES} variable is a list
of shared libraries to build.  For instance, to create a library named
@file{libgettext.a} and its corresponding shared libraries, and install
them in @samp{libdir}, write:

@example
lib_LTLIBRARIES = libgettext.la
@end example

@vindex lib_LTLIBRARIES
@vindex pkglib_LTLIBRARIES
@vindex noinst_LTLIBRARIES
@vindex check_LTLIBRARIES

@cindex check_LTLIBRARIES, not allowed

Note that shared libraries @emph{must} be installed in order to work
properly, so @code{check_LTLIBRARIES} is not allowed.  However,
@code{noinst_LTLIBRARIES} is allowed.  This feature should be used for
libtool ``convenience libraries''.

@cindex suffix .lo, defined

For each library, the @samp{@var{library}_LIBADD} variable contains the
names of extra libtool objects (@file{.lo} files) to add to the shared
library.  The @samp{@var{library}_LDFLAGS} variable contains any
additional libtool flags, such as @samp{-version-info} or
@samp{-static}.

@cindex @@LTLIBOBJS@@, special handling

Where an ordinary library might include @code{@@LIBOBJS@@}, a libtool
library must use @code{@@LTLIBOBJS@@}.  This is required because the
object files that libtool operates on do not necessarily end in
@file{.o}.  The libtool manual contains more details on this topic.

For libraries installed in some directory, Automake will automatically
supply the appropriate @samp{-rpath} option.  However, for libraries
determined at configure time (and thus mentioned in
@code{EXTRA_LTLIBRARIES}), Automake does not know the eventual
installation directory; for such libraries you must add the
@samp{-rpath} option to the appropriate @samp{_LDFLAGS} variable by
hand.

Ordinarily, Automake requires that a shared library's name start with
@samp{lib}.  However, if you are building a dynamically loadable module
then you might wish to use a "nonstandard" name.  In this case, put
@code{-module} into the @samp{_LDFLAGS} variable.

@xref{Using Automake, Using Automake with Libtool, The Libtool Manual,
libtool, The Libtool Manual}, for more information.


@node Program and Library Variables, LIBOBJS, A Shared Library, Programs
@section Program and Library Variables

Associated with each program are a collection of variables which can be
used to modify how that program is built.  There is a similar list of
such variables for each library.  The canonical name of the program (or
library) is used as a base for naming these variables.

In the list below, we use the name ``maude'' to refer to the program or
library.  In your @file{Makefile.am} you would replace this with the
canonical name of your program.  This list also refers to ``maude'' as a
program, but in general the same rules apply for both static and dynamic
libraries; the documentation below notes situations where programs and
libraries differ.

@table @samp
@item maude_SOURCES
This variable, if it exists, lists all the source files which are
compiled to build the program.  These files are added to the
distribution by default.  When building the program, Automake will cause
each source file to be compiled to a single @file{.o} file (or
@file{.lo} when using libtool).  Normally these object files are named
after the source file, but other factors can change this.  If a file in
the @samp{_SOURCES} variable has an unrecognized extension, Automake
will do one of two things with it.  If a suffix rule exists for turning
files with the unrecognized extension into @file{.o} files, then
automake will treat this file as it will any other source file
(@pxref{Support for Other Languages}).  Otherwise, the file will be
ignored as though it were a header file.

The prefixes @samp{dist_} and @samp{nodist_} can be used to control
whether files listed in a @samp{_SOURCES} variable are distributed.
@samp{dist_} is redundant, as sources are distributed by default, but it
can be specified for clarity if desired.

It is possible to have both @samp{dist_} and @samp{nodist_} variants of
a given @samp{_SOURCES} variable at once; this lets you easily
distribute some files and not others, for instance:

@example
nodist_maude_SOURCES = nodist.c
dist_maude_SOURCES = dist-me.c
@end example

By default the output file (on Unix systems, the @file{.o} file) will be
put into the current build directory.  However, if the option
@code{subdir-objects} is in effect in the current directory then the
@file{.o} file will be put into the subdirectory named after the source
file.  For instance, with @code{subdir-objects} enabled,
@file{sub/dir/file.c} will be compiled to @file{sub/dir/file.o}.  Some
people prefer this mode of operation.  You can specify
@code{subdir-objects} in @code{AUTOMAKE_OPTIONS} (@pxref{Options}).
@cindex Subdirectory, objects in
@cindex Objects in subdirectory


@item EXTRA_maude_SOURCES
Automake needs to know the list of files you intend to compile
@emph{statically}.  For one thing, this is the only way Automake has of
knowing what sort of language support a given @file{Makefile.in}
requires.  @footnote{There are other, more obscure reasons reasons for
this limitation as well.}  This means that, for example, you can't put a
configure substitution like @samp{@@my_sources@@} into a @samp{_SOURCES}
variable.  If you intend to conditionally compile source files and use
@file{configure} to substitute the appropriate object names into, e.g.,
@samp{_LDADD} (see below), then you should list the corresponding source
files in the @samp{EXTRA_} variable.

This variable also supports @samp{dist_} and @samp{nodist_} prefixes,
e.g., @samp{nodist_EXTRA_maude_SOURCES}.

@item maude_AR
A static library is created by default by invoking @code{$(AR) cru}
followed by the name of the library and then the objects being put into
the library.  You can override this by setting the @samp{_AR} variable.
This is usually used with C++; some C++ compilers require a special
invocation in order to instantiate all the templates which should go
into a library.  For instance, the SGI C++ compiler likes this macro set
like so:
@example
libmaude_a_AR = $(CXX) -ar -o
@end example

@item maude_LIBADD
Extra objects can be added to a static library using the @samp{_LIBADD}
variable.  This should be used for objects determined by
@code{configure}.  Note that @samp{_LIBADD} is not used for shared
libraries; there you must use @samp{_LDADD}.

@item maude_LDADD
Extra objects can be added to a shared library or a program by listing
them in the @samp{_LDADD} variable.  This should be used for objects
determined by @code{configure}.

@samp{_LDADD} and @samp{_LIBADD} are inappropriate for passing
program-specific linker flags (except for @samp{-l}, @samp{-L},
@samp{-dlopen} and @samp{-dlpreopen}).  Use the @samp{_LDFLAGS} variable
for this purpose.

For instance, if your @file{configure.in} uses @code{AC_PATH_XTRA}, you
could link your program against the X libraries like so:

@example
maude_LDADD = $(X_PRE_LIBS) $(X_LIBS) $(X_EXTRA_LIBS)
@end example

@item maude_LDFLAGS
This variable is used to pass extra flags to the link step of a program
or a shared library.

@item maude_LINK
You can override the linker on a per-program basis.  By default the
linker is chosen according to the languages used by the program.  For
instance, a program that includes C++ source code would use the C++
compiler to link.  The @samp{_LINK} variable must hold the name of a
command which can be passed all the @file{.o} file names as arguments.
Note that the name of the underlying program is @emph{not} passed to
@samp{_LINK}; typically one uses @samp{$@@}:

@example
maude_LINK = $(CCLD) -magic -o $@@
@end example

@item maude_CFLAGS
Automake allows you to set compilation flags on a per-program (or
per-library) basis.  A single source file can be included in several
programs, and it will potentially be compiled with different flags for
each program.  This works for any language directly supported by
Automake.  The flags are @samp{_CFLAGS}, @samp{_CXXFLAGS},
@samp{_OBJCFLAGS}, @samp{_LFLAGS}, @samp{_YFLAGS}, @samp{_CCASFLAGS},
@samp{_FFLAGS}, @samp{_RFLAGS}, and @samp{_GCJFLAGS}.

When using a per-program compilation flag, Automake will choose a
different name for the intermediate object files.  Ordinarily a file
like @file{sample.c} will be compiled to produce @file{sample.o}.
However, if the program's @samp{_CFLAGS} variable is set, then the
object file will be named, for instance, @file{maude-sample.o}.

In compilations with per-program flags, the ordinary @samp{AM_} form of
the flags variable is @emph{not} automatically included in the
compilation (however, the user form of the variable @emph{is} included).
So for instance, if you want the hypothetical @file{maude} compilations
to also use the value of @samp{AM_CFLAGS}, you would need to write:

@example
maude_CFLAGS = ... your flags ... $(AM_CFLAGS)
@end example

@item maude_DEPENDENCIES
It is also occasionally useful to have a program depend on some other
target which is not actually part of that program.  This can be done
using the @samp{_DEPENDENCIES} variable.  Each program depends on the
contents of such a variable, but no further interpretation is done.

If @samp{_DEPENDENCIES} is not supplied, it is computed by Automake.
The automatically-assigned value is the contents of @samp{_LDADD} or
@samp{_LIBADD}, with most configure substitutions, @samp{-l}, @samp{-L},
@samp{-dlopen} and @samp{-dlpreopen} options removed.  The configure
substitutions that are left in are only @samp{@@LIBOBJS@@} and
@samp{@@ALLOCA@@}; these are left because it is known that they will not
cause an invalid value for @samp{_DEPENDENCIES} to be generated.

@item maude_SHORTNAME
On some platforms the allowable file names are very short.  In order to
support these systems and per-program compilation flags at the same
time, Automake allows you to set a ``short name'' which will influence
how intermediate object files are named.  For instance, if you set
@samp{maude_SHORTNAME} to @samp{m}, then in the above per-program
compilation flag example the object file would be named
@file{m-sample.o} rather than @file{maude-sample.o}.  This facility is
rarely needed in practice, and we recommend avoiding it until you find
it is required.
@end table


@node LIBOBJS, Program variables, Program and Library Variables, Programs
@section Special handling for LIBOBJS and ALLOCA

@cindex @@LIBOBJS@@, special handling
@cindex @@ALLOCA@@, special handling

Automake explicitly recognizes the use of @code{@@LIBOBJS@@} and
@code{@@ALLOCA@@}, and uses this information, plus the list of
@code{LIBOBJS} files derived from @file{configure.in} to automatically
include the appropriate source files in the distribution (@pxref{Dist}).
These source files are also automatically handled in the
dependency-tracking scheme; see @xref{Dependencies}.

@code{@@LIBOBJS@@} and @code{@@ALLOCA@@} are specially recognized in any
@samp{_LDADD} or @samp{_LIBADD} variable.


@node Program variables, Yacc and Lex, LIBOBJS, Programs
@section Variables used when building a program

Occasionally it is useful to know which @file{Makefile} variables
Automake uses for compilations; for instance you might need to do your
own compilation in some special cases.

Some variables are inherited from Autoconf; these are @code{CC},
@code{CFLAGS}, @code{CPPFLAGS}, @code{DEFS}, @code{LDFLAGS}, and
@code{LIBS}.
@vindex CC
@vindex CFLAGS
@vindex CPPFLAGS
@vindex DEFS
@vindex LDFLAGS
@vindex LIBS

There are some additional variables which Automake itself defines:

@vtable @code
@item AM_CPPFLAGS
The contents of this macro are passed to every compilation which invokes
the C preprocessor; it is a list of arguments to the preprocessor.  For
instance, @samp{-I} and @samp{-D} options should be listed here.

Automake already provides some @samp{-I} options automatically.  In
particular it generates @samp{-I$(srcdir)}, @samp{-I.}, and a @samp{-I}
pointing to the directory holding @file{config.h} (if you've used
@code{AC_CONFIG_HEADER} or @code{AM_CONFIG_HEADER}).  You can disable
the default @samp{-I} options using the @samp{nostdinc} option.

@item INCLUDES
This does the same job as @samp{AM_CPPFLAGS}.  It is an older name for
the same functionality.  This macro is deprecated; we suggest using
@samp{AM_CPPFLAGS} instead.

@item AM_CFLAGS
This is the variable which the @file{Makefile.am} author can use to pass
in additional C compiler flags.  It is more fully documented elsewhere.
In some situations, this is not used, in preference to the
per-executable (or per-library) @code{_CFLAGS}.

@item COMPILE
This is the command used to actually compile a C source file.  The
filename is appended to form the complete command line.

@item AM_LDFLAGS
This is the variable which the @file{Makefile.am} author can use to pass
in additional linker flags.  In some situations, this is not used, in
preference to the per-executable (or per-library) @code{_LDFLAGS}.

@item LINK
This is the command used to actually link a C program.  It already
includes @samp{-o $@@} and the usual variable references (for instance,
@code{CFLAGS}); it takes as ``arguments'' the names of the object files
and libraries to link in.
@end vtable


@node Yacc and Lex, C++ Support, Program variables, Programs
@section Yacc and Lex support

Automake has somewhat idiosyncratic support for Yacc and Lex.

Automake assumes that the @file{.c} file generated by @code{yacc} (or
@code{lex}) should be named using the basename of the input file.  That
is, for a yacc source file @file{foo.y}, Automake will cause the
intermediate file to be named @file{foo.c} (as opposed to
@file{y.tab.c}, which is more traditional).

The extension of a yacc source file is used to determine the extension
of the resulting @samp{C} or @samp{C++} file.  Files with the extension
@samp{.y} will be turned into @samp{.c} files; likewise, @samp{.yy} will
become @samp{.cc}; @samp{.y++}, @samp{c++}; and @samp{.yxx},
@samp{.cxx}.

Likewise, lex source files can be used to generate @samp{C} or
@samp{C++}; the extensions @samp{.l}, @samp{.ll}, @samp{.l++}, and
@samp{.lxx} are recognized.

You should never explicitly mention the intermediate (@samp{C} or
@samp{C++}) file in any @samp{SOURCES} variable; only list the source
file.

The intermediate files generated by @code{yacc} (or @code{lex}) will be
included in any distribution that is made.  That way the user doesn't
need to have @code{yacc} or @code{lex}.

If a @code{yacc} source file is seen, then your @file{configure.in} must
define the variable @samp{YACC}.  This is most easily done by invoking
the macro @samp{AC_PROG_YACC} (@pxref{Particular Programs, , Particular
Program Checks, autoconf, The Autoconf Manual}).

When @code{yacc} is invoked, it is passed @samp{YFLAGS} and
@samp{AM_YFLAGS}.  The former is a user variable and the latter is
intended for the @file{Makefile.am} author.

Similarly, if a @code{lex} source file is seen, then your
@file{configure.in} must define the variable @samp{LEX}.  You can use
@samp{AC_PROG_LEX} to do this (@pxref{Particular Programs, , Particular
Program Checks, autoconf, The Autoconf Manual}), but using
@code{AM_PROG_LEX} macro (@pxref{Macros}) is recommended.

When @code{lex} is invoked, it is passed @samp{LFLAGS} and
@samp{AM_LFLAGS}.  The former is a user variable and the latter is
intended for the @file{Makefile.am} author.



@cindex ylwrap
@cindex yacc, multiple parsers
@cindex Multiple yacc parsers
@cindex Multiple lex lexers
@cindex lex, multiple lexers


Automake makes it possible to include multiple @code{yacc} (or
@code{lex}) source files in a single program.  Automake uses a small
program called @code{ylwrap} to run @code{yacc} (or @code{lex}) in a
subdirectory.  This is necessary because yacc's output filename is
fixed, and a parallel make could conceivably invoke more than one
instance of @code{yacc} simultaneously.  The @code{ylwrap} program is
distributed with Automake.  It should appear in the directory specified
by @samp{AC_CONFIG_AUX_DIR} (@pxref{Input, , Finding `configure' Input,
autoconf, The Autoconf Manual}), or the current directory if that macro
is not used in @file{configure.in}.

For @code{yacc}, simply managing locking is insufficient.  The output of
@code{yacc} always uses the same symbol names internally, so it isn't
possible to link two @code{yacc} parsers into the same executable.

We recommend using the following renaming hack used in @code{gdb}:
@example
#define	yymaxdepth c_maxdepth
#define	yyparse	c_parse
#define	yylex	c_lex
#define	yyerror	c_error
#define	yylval	c_lval
#define	yychar	c_char
#define	yydebug	c_debug
#define	yypact	c_pact
#define	yyr1	c_r1
#define	yyr2	c_r2
#define	yydef	c_def
#define	yychk	c_chk
#define	yypgo	c_pgo
#define	yyact	c_act
#define	yyexca	c_exca
#define yyerrflag c_errflag
#define yynerrs	c_nerrs
#define	yyps	c_ps
#define	yypv	c_pv
#define	yys	c_s
#define	yy_yys	c_yys
#define	yystate	c_state
#define	yytmp	c_tmp
#define	yyv	c_v
#define	yy_yyv	c_yyv
#define	yyval	c_val
#define	yylloc	c_lloc
#define yyreds	c_reds
#define yytoks	c_toks
#define yylhs	c_yylhs
#define yylen	c_yylen
#define yydefred c_yydefred
#define yydgoto	c_yydgoto
#define yysindex c_yysindex
#define yyrindex c_yyrindex
#define yygindex c_yygindex
#define yytable	 c_yytable
#define yycheck	 c_yycheck
#define yyname   c_yyname
#define yyrule   c_yyrule
@end example

For each define, replace the @samp{c_} prefix with whatever you like.
These defines work for @code{bison}, @code{byacc}, and traditional
@code{yacc}s.  If you find a parser generator that uses a symbol not
covered here, please report the new name so it can be added to the list.


@node C++ Support, Assembly Support, Yacc and Lex, Programs
@section C++ Support

@cindex C++ support
@cindex Support for C++

Automake includes full support for C++.

Any package including C++ code must define the output variable
@samp{CXX} in @file{configure.in}; the simplest way to do this is to use
the @code{AC_PROG_CXX} macro (@pxref{Particular Programs, , Particular
Program Checks, autoconf, The Autoconf Manual}).

A few additional variables are defined when a C++ source file is seen:

@vtable @code
@item CXX
The name of the C++ compiler.

@item CXXFLAGS
Any flags to pass to the C++ compiler.

@item AM_CXXFLAGS
The maintainer's variant of @code{CXXFLAGS}.

@item CXXCOMPILE
The command used to actually compile a C++ source file.  The file name
is appended to form the complete command line.

@item CXXLINK
The command used to actually link a C++ program.
@end vtable


@node Assembly Support, Fortran 77 Support, C++ Support, Programs
@section Assembly Support

Automake includes some support for assembly code.

The variable @code{CCAS} holds the name of the compiler used to build
assembly code.  This compiler must work a bit like a C compiler; in
particular it must accept @samp{-c} and @samp{-o}.  The value of
@code{CCASFLAGS} is passed to the compilation.
@vindex CCAS
@vindex CCASFLAGS

You are required to set @code{CCAS} and @code{CCASFLAGS} via
@file{configure.in}.  The autoconf macro @code{AM_PROG_AS} will do this
for you.  Unless they are already set, it simply sets @code{CCAS} to the
C compiler and @code{CCASFLAGS} to the C compiler flags.

Only the suffixes @samp{.s} and @samp{.S} are recognized by
@code{automake} as being files containing assembly code.


@node Fortran 77 Support, Java Support, Assembly Support, Programs
@comment  node-name,  next,  previous,  up
@section Fortran 77 Support

@cindex Fortran 77 support
@cindex Support for Fortran 77

Automake includes full support for Fortran 77.

Any package including Fortran 77 code must define the output variable
@samp{F77} in @file{configure.in}; the simplest way to do this is to use
the @code{AC_PROG_F77} macro (@pxref{Particular Programs, , Particular
Program Checks, autoconf, The Autoconf Manual}).  @xref{Fortran 77 and
Autoconf}.

A few additional variables are defined when a Fortran 77 source file is
seen:

@vtable @code

@item F77
The name of the Fortran 77 compiler.

@item FFLAGS
Any flags to pass to the Fortran 77 compiler.

@item AM_FFLAGS
The maintainer's variant of @code{FFLAGS}.

@item RFLAGS
Any flags to pass to the Ratfor compiler.

@item AM_RFLAGS
The maintainer's variant of @code{RFLAGS}.

@item F77COMPILE
The command used to actually compile a Fortran 77 source file.  The file
name is appended to form the complete command line.

@item FLINK
The command used to actually link a pure Fortran 77 program or shared
library.

@end vtable

Automake can handle preprocessing Fortran 77 and Ratfor source files in
addition to compiling them@footnote{Much, if not most, of the
information in the following sections pertaining to preprocessing
Fortran 77 programs was taken almost verbatim from @ref{Catalogue of
Rules, , Catalogue of Rules, make, The GNU Make Manual}.}.  Automake
also contains some support for creating programs and shared libraries
that are a mixture of Fortran 77 and other languages (@pxref{Mixing
Fortran 77 With C and C++}).

These issues are covered in the following sections.

@menu
* Preprocessing Fortran 77::
* Compiling Fortran 77 Files::
* Mixing Fortran 77 With C and C++::
* Fortran 77 and Autoconf::
@end menu


@node Preprocessing Fortran 77, Compiling Fortran 77 Files, Fortran 77 Support, Fortran 77 Support
@comment  node-name,  next,  previous,  up
@subsection Preprocessing Fortran 77

@cindex Preprocessing Fortran 77
@cindex Fortran 77, Preprocessing
@cindex Ratfor programs

@file{N.f} is made automatically from @file{N.F} or @file{N.r}.  This
rule runs just the preprocessor to convert a preprocessable Fortran 77
or Ratfor source file into a strict Fortran 77 source file.  The precise
command used is as follows:

@table @file

@item .F
@code{$(F77) -F $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FFLAGS) $(FFLAGS)}

@item .r
@code{$(F77) -F $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)}

@end table


@node Compiling Fortran 77 Files, Mixing Fortran 77 With C and C++, Preprocessing Fortran 77, Fortran 77 Support
@comment  node-name,  next,  previous,  up
@subsection Compiling Fortran 77 Files

@file{N.o} is made automatically from @file{N.f}, @file{N.F} or
@file{N.r} by running the Fortran 77 compiler.  The precise command used
is as follows:

@table @file

@item .f
@code{$(F77) -c $(AM_FFLAGS) $(FFLAGS)}

@item .F
@code{$(F77) -c $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FFLAGS) $(FFLAGS)}

@item .r
@code{$(F77) -c $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)}

@end table


@node Mixing Fortran 77 With C and C++, Fortran 77 and Autoconf, Compiling Fortran 77 Files, Fortran 77 Support
@comment  node-name,  next,  previous,  up
@subsection Mixing Fortran 77 With C and C++

@cindex Fortran 77, mixing with C and C++
@cindex Mixing Fortran 77 with C and C++
@cindex Linking Fortran 77 with C and C++
@cindex cfortran
@cindex Mixing Fortran 77 with C and/or C++

Automake currently provides @emph{limited} support for creating programs
and shared libraries that are a mixture of Fortran 77 and C and/or C++.
However, there are many other issues related to mixing Fortran 77 with
other languages that are @emph{not} (currently) handled by Automake, but
that are handled by other packages@footnote{For example,
@uref{http://www-zeus.desy.de/~burow/cfortran/, the cfortran package}
addresses all of these inter-language issues, and runs under nearly all
Fortran 77, C and C++ compilers on nearly all platforms.  However,
@code{cfortran} is not yet Free Software, but it will be in the next
major release.}.

@page
Automake can help in two ways:

@enumerate
@item
Automatic selection of the linker depending on which combinations of
source code.

@item
Automatic selection of the appropriate linker flags (e.g. @samp{-L} and
@samp{-l}) to pass to the automatically selected linker in order to link
in the appropriate Fortran 77 intrinsic and run-time libraries.

@cindex FLIBS, defined
These extra Fortran 77 linker flags are supplied in the output variable
@code{FLIBS} by the @code{AC_F77_LIBRARY_LDFLAGS} Autoconf macro
supplied with newer versions of Autoconf (Autoconf version 2.13 and
later).  @xref{Fortran 77 Compiler Characteristics, , , autoconf, The
Autoconf}.
@end enumerate

If Automake detects that a program or shared library (as mentioned in
some @code{_PROGRAMS} or @code{_LTLIBRARIES} primary) contains source
code that is a mixture of Fortran 77 and C and/or C++, then it requires
that the macro @code{AC_F77_LIBRARY_LDFLAGS} be called in
@file{configure.in}, and that either @code{$(FLIBS)} or @code{@@FLIBS@@}
appear in the appropriate @code{_LDADD} (for programs) or @code{_LIBADD}
(for shared libraries) variables.  It is the responsibility of the
person writing the @file{Makefile.am} to make sure that @code{$(FLIBS)}
or @code{@@FLIBS@@} appears in the appropriate @code{_LDADD} or
@code{_LIBADD} variable.

@cindex Mixed language example
@cindex Example, mixed language

For example, consider the following @file{Makefile.am}:

@example
bin_PROGRAMS = foo
foo_SOURCES  = main.cc foo.f
foo_LDADD    = libfoo.la @@FLIBS@@

pkglib_LTLIBRARIES = libfoo.la
libfoo_la_SOURCES  = bar.f baz.c zardoz.cc
libfoo_la_LIBADD   = $(FLIBS)
@end example

In this case, Automake will insist that @code{AC_F77_LIBRARY_LDFLAGS}
is mentioned in @file{configure.in}.  Also, if @code{@@FLIBS@@} hadn't
been mentioned in @code{foo_LDADD} and @code{libfoo_la_LIBADD}, then
Automake would have issued a warning.


@page
@menu
* How the Linker is Chosen::
@end menu

@node How the Linker is Chosen,  , Mixing Fortran 77 With C and C++, Mixing Fortran 77 With C and C++
@comment  node-name,  next,  previous,  up
@subsubsection How the Linker is Chosen

@cindex Automatic linker selection
@cindex Selecting the linker automatically

The following diagram demonstrates under what conditions a particular
linker is chosen by Automake.

For example, if Fortran 77, C and C++ source code were to be compiled
into a program, then the C++ linker will be used.  In this case, if the
C or Fortran 77 linkers required any special libraries that weren't
included by the C++ linker, then they must be manually added to an
@code{_LDADD} or @code{_LIBADD} variable by the user writing the
@file{Makefile.am}.

@example
                     \              Linker
          source      \
           code        \     C        C++     Fortran
     -----------------  +---------+---------+---------+
                        |         |         |         |
     C                  |    x    |         |         |
                        |         |         |         |
                        +---------+---------+---------+
                        |         |         |         |
         C++            |         |    x    |         |
                        |         |         |         |
                        +---------+---------+---------+
                        |         |         |         |
               Fortran  |         |         |    x    |
                        |         |         |         |
                        +---------+---------+---------+
                        |         |         |         |
     C + C++            |         |    x    |         |
                        |         |         |         |
                        +---------+---------+---------+
                        |         |         |         |
     C +       Fortran  |         |         |    x    |
                        |         |         |         |
                        +---------+---------+---------+
                        |         |         |         |
         C++ + Fortran  |         |    x    |         |
                        |         |         |         |
                        +---------+---------+---------+
                        |         |         |         |
     C + C++ + Fortran  |         |    x    |         |
                        |         |         |         |
                        +---------+---------+---------+
@end example


@node Fortran 77 and Autoconf,  , Mixing Fortran 77 With C and C++, Fortran 77 Support
@comment  node-name,  next,  previous,  up
@subsection Fortran 77 and Autoconf

The current Automake support for Fortran 77 requires a recent enough
version of Autoconf that also includes support for Fortran 77.  Full
Fortran 77 support was added to Autoconf 2.13, so you will want to use
that version of Autoconf or later.


@node Java Support, Support for Other Languages, Fortran 77 Support, Programs
@comment  node-name,  next,  previous,  up
@section Java Support

@cindex Java support
@cindex Support for Java

Automake includes support for compiled Java, using @code{gcj}, the Java
front end to the GNU Compiler Collection.

Any package including Java code to be compiled must define the output
variable @samp{GCJ} in @file{configure.in}; the variable @samp{GCJFLAGS}
must also be defined somehow (either in @file{configure.in} or
@file{Makefile.am}).  The simplest way to do this is to use the
@code{AM_PROG_GCJ} macro.

@vindex GCJFLAGS

By default, programs including Java source files are linked with
@code{gcj}.

As always, the contents of @samp{AM_GCJFLAGS} are passed to every
compilation invoking @code{gcj} (in its role as an ahead-of-time
compiler -- when invoking it to create @file{.class} files,
@samp{AM_JAVACFLAGS} is used instead).  If it is necessary to pass
options to @code{gcj} from @file{Makefile.am}, this macro, and not the
user macro @samp{GCJFLAGS}, should be used.

@vindex AM_GCJFLAGS

@code{gcj} can be used to compile @file{.java}, @file{.class},
@file{.zip}, or @file{.jar} files.

When linking, @code{gcj} requires that the main class be specified
using the @samp{--main=} option.  The easiest way to do this is to use
the @code{_LDFLAGS} variable for the program.


@node Support for Other Languages, ANSI, Java Support, Programs
@comment  node-name,  next,  previous,  up
@section Support for Other Languages

Automake currently only includes full support for C, C++ (@pxref{C++
Support}), Fortran 77 (@pxref{Fortran 77 Support}), and Java
(@pxref{Java Support}).  There is only rudimentary support for other
languages, support for which will be improved based on user demand.

Some limited support for adding your own languages is available via the
suffix rule handling; see @ref{Suffixes}.


@node ANSI, Dependencies, Support for Other Languages, Programs
@section Automatic de-ANSI-fication

@cindex de-ANSI-fication, defined

Although the GNU standards allow the use of ANSI C, this can have the
effect of limiting portability of a package to some older compilers
(notably the SunOS C compiler).

Automake allows you to work around this problem on such machines by
@dfn{de-ANSI-fying} each source file before the actual compilation takes
place.

@vindex AUTOMAKE_OPTIONS
@opindex ansi2knr

If the @file{Makefile.am} variable @code{AUTOMAKE_OPTIONS}
(@pxref{Options}) contains the option @code{ansi2knr} then code to
handle de-ANSI-fication is inserted into the generated
@file{Makefile.in}.

This causes each C source file in the directory to be treated as ANSI C.
If an ANSI C compiler is available, it is used.  If no ANSI C compiler
is available, the @code{ansi2knr} program is used to convert the source
files into K&R C, which is then compiled.

The @code{ansi2knr} program is simple-minded.  It assumes the source
code will be formatted in a particular way; see the @code{ansi2knr} man
page for details.

Support for de-ANSI-fication requires the source files @file{ansi2knr.c}
and @file{ansi2knr.1} to be in the same package as the ANSI C source;
these files are distributed with Automake.  Also, the package
@file{configure.in} must call the macro @code{AM_C_PROTOTYPES}
(@pxref{Macros}).
@cvindex AM_C_PROTOTYPES

Automake also handles finding the @code{ansi2knr} support files in some
other directory in the current package.  This is done by prepending the
relative path to the appropriate directory to the @code{ansi2knr}
option.  For instance, suppose the package has ANSI C code in the
@file{src} and @file{lib} subdirs.  The files @file{ansi2knr.c} and
@file{ansi2knr.1} appear in @file{lib}.  Then this could appear in
@file{src/Makefile.am}:

@example
AUTOMAKE_OPTIONS = ../lib/ansi2knr
@end example

If no directory prefix is given, the files are assumed to be in the
current directory.

Files mentioned in @code{LIBOBJS} which need de-ANSI-fication will not
be automatically handled.  That's because @code{configure} will generate
an object name like @file{regex.o}, while @code{make} will be looking
for @file{regex_.o} (when de-ANSI-fying).  Eventually this problem will
be fixed via @code{autoconf} magic, but for now you must put this code
into your @file{configure.in}, just before the @code{AC_OUTPUT} call:

@example
# This is necessary so that .o files in LIBOBJS are also built via
# the ANSI2KNR-filtering rules.
LIBOBJS=`echo $LIBOBJS|sed 's/\.o /\$U.o /g;s/\.o$/\$U.o/'`
@end example
@c FIXME: Ask Akim how this should be handled in the upcoming Autoconf.

Note that automatic de-ANSI-fication will not work when the package is
being built for a different host architecture.  That is because automake
currently has no way to build @code{ansi2knr} for the build machine.


@node Dependencies, EXEEXT, ANSI, Programs
@section Automatic dependency tracking

As a developer it is often painful to continually update the
@file{Makefile.in} whenever the include-file dependencies change in a
project.  Automake supplies a way to automatically track dependency
changes.

@cindex Dependency tracking
@cindex Automatic dependency tracking

Automake always uses complete dependencies for a compilation, including
system headers.  Automake's model is that dependency computation should
be a side effect of the build.  To this end, dependencies are computed
by running all compilations through a special wrapper program called
@code{depcomp}.  @code{depcomp} understands how to coax many different C
and C++ compilers into generating dependency information in the format
it requires.  @code{automake -a} will install @code{depcomp} into your
source tree for you.  If @code{depcomp} can't figure out how to properly
invoke your compiler, dependency tracking will simply be disabled for
your build.

@cindex depcomp

Experience with earlier versions of Automake @footnote{See
@uref{http://sources.redhat.com/automake/dependencies.html} for more
information on the history and experiences with automatic dependency
tracking in Automake} taught us that it is not reliable to generate
dependencies only on the maintainer's system, as configurations vary too
much.  So instead Automake implements dependency tracking at build time.

Automatic dependency tracking can be suppressed by putting
@code{no-dependencies} in the variable @code{AUTOMAKE_OPTIONS}, or
passing @code{no-dependencies} as an argument to @code{AM_INIT_AUTOMAKE}
(this should be the prefered way).  Or, you can invoke @code{automake}
with the @code{-i} option.  Dependency tracking is enabled by default.

@vindex AUTOMAKE_OPTIONS
@opindex no-dependencies

The person building your package also can choose to disable dependency
tracking by configuring with @code{--disable-dependency-tracking}.

@cindex Disabling dependency tracking
@cindex Dependency tracking, disabling


@node EXEEXT,  , Dependencies, Programs
@section Support for executable extensions

@cindex Executable extension
@cindex Extension, executable
@cindex Windows

On some platforms, such as Windows, executables are expected to have an
extension such as @samp{.exe}.  On these platforms, some compilers (GCC
among them) will automatically generate @file{foo.exe} when asked to
generate @file{foo}.

Automake provides mostly-transparent support for this.  Unfortunately
@emph{mostly} doesn't yet mean @emph{fully}.  Until the English
dictionary is revised, you will have to assist Automake if your package
must support those platforms.

One thing you must be aware of is that, internally, Automake rewrites
something like this:

@example
bin_PROGRAMS = liver
@end example

to this:

@example
bin_PROGRAMS = liver$(EXEEXT)
@end example

The targets Automake generates are likewise given the @samp{$(EXEEXT)}
extension.  @code{EXEEXT}

However, Automake cannot apply this rewriting to @code{configure}
substitutions.  This means that if you are conditionally building a
program using such a substitution, then your @file{configure.in} must
take care to add @samp{$(EXEEXT)} when constructing the output variable.

With Autoconf 2.13 and earlier, you must explicitly use @code{AC_EXEEXT}
to get this support.  With Autoconf 2.50, @code{AC_EXEEXT} is run
automatically if you configure a compiler (say, through
@code{AC_PROG_CC}).

Sometimes maintainers like to write an explicit link rule for their
program.  Without executable extension support, this is easy---you
simply write a target with the same name as the program.  However, when
executable extension support is enabled, you must instead add the
@samp{$(EXEEXT)} suffix.

Unfortunately, due to the change in Autoconf 2.50, this means you must
always add this extension.  However, this is a problem for maintainers
who know their package will never run on a platform that has executable
extensions.  For those maintainers, the @code{no-exeext} option
(@pxref{Options}) will disable this feature.  This works in a fairly
ugly way; if @code{no-exeext} is seen, then the presence of a target
named @code{foo} in @file{Makefile.am} will override an
automake-generated target of the form @code{foo$(EXEEXT)}.  Without the
@code{no-exeext} option, this use will give an error.


@node Other objects, Other GNU Tools, Programs, Top
@chapter Other Derived Objects

Automake can handle derived objects which are not C programs.  Sometimes
the support for actually building such objects must be explicitly
supplied, but Automake will still automatically handle installation and
distribution.

@menu
* Scripts::                     Executable scripts
* Headers::                     Header files
* Data::                        Architecture-independent data files
* Sources::                     Derived sources
@end menu


@node Scripts, Headers, Other objects, Other objects
@section Executable Scripts

@cindex _SCRIPTS primary, defined
@cindex SCRIPTS primary, defined
@cindex Primary variable, SCRIPTS

It is possible to define and install programs which are scripts.  Such
programs are listed using the @samp{SCRIPTS} primary name.  Automake
doesn't define any dependencies for scripts; the @file{Makefile.am}
should include the appropriate rules.
@vindex SCRIPTS

Automake does not assume that scripts are derived objects; such objects
must be deleted by hand (@pxref{Clean}).

The @code{automake} program itself is a Perl script that is generated at
configure time from @file{automake.in}.  Here is how this is handled:

@example
bin_SCRIPTS = automake
@end example

Since @code{automake} appears in the @code{AC_OUTPUT} macro, a target
for it is automatically generated, and it is also automatically cleaned
(despite the fact it's a script).

@cindex SCRIPTS, installation directories
@cindex Installing scripts

@vindex bin_SCRIPTS
@vindex sbin_SCRIPTS
@vindex libexec_SCRIPTS
@vindex pkgdata_SCRIPTS
@vindex noinst_SCRIPTS
@vindex check_SCRIPTS

Script objects can be installed in @code{bindir}, @code{sbindir},
@code{libexecdir}, or @code{pkgdatadir}.

Scripts that need not being installed can be listed in
@code{noinst_SCRIPTS}, and among them, those which are needed only by
@code{make check} should go in @code{check_SCRIPTS}.


@node Headers, Data, Scripts, Other objects
@section Header files

@cindex _HEADERS primary, defined
@cindex HEADERS primary, defined
@cindex Primary variable, HEADERS

@vindex noinst_HEADERS

Header files are specified by the @samp{HEADERS} family of variables.
Generally header files are not installed, so the @code{noinst_HEADERS}
variable will be the most used.  @footnote{However, for the case of a
non-installed header file that is actually used by a particular program,
we recommend listing it in the program's @samp{_SOURCES} variable
instead of in @code{noinst_HEADERS}.  We believe this is more clear.}
@vindex HEADERS

All header files must be listed somewhere; missing ones will not appear
in the distribution.  Often it is clearest to list uninstalled headers
with the rest of the sources for a program.  @xref{A Program}.  Headers
listed in a @samp{_SOURCES} variable need not be listed in any
@samp{_HEADERS} variable.

@cindex HEADERS, installation directories
@cindex Installing headers

@vindex include_HEADERS
@vindex oldinclude_HEADERS
@vindex pkginclude_HEADERS

Headers can be installed in @code{includedir}, @code{oldincludedir}, or
@code{pkgincludedir}.


@node Data, Sources, Headers, Other objects
@section Architecture-independent data files

@cindex _DATA primary, defined
@cindex DATA primary, defined
@cindex Primary variable, DATA

Automake supports the installation of miscellaneous data files using the
@samp{DATA} family of variables.
@vindex DATA

@vindex data_DATA
@vindex sysconf_DATA
@vindex sharedstate_DATA
@vindex localstate_DATA
@vindex pkgdata_DATA

Such data can be installed in the directories @code{datadir},
@code{sysconfdir}, @code{sharedstatedir}, @code{localstatedir}, or
@code{pkgdatadir}.

By default, data files are @emph{not} included in a distribution.  Of
course, you can use the @samp{dist_} prefix to change this on a
per-variable basis.

Here is how Automake declares its auxiliary data files:

@example
dist_pkgdata_DATA = clean-kr.am clean.am @dots{}
@end example


@node Sources,  , Data, Other objects
@section Built sources

@cindex BUILT_SOURCES, defined

Occasionally a file which would otherwise be called @samp{source}
(e.g. a C @samp{.h} file) is actually derived from some other file.
Such files should be listed in the @code{BUILT_SOURCES} variable.
@vindex BUILT_SOURCES

@code{BUILT_SOURCES} is actually a bit of a misnomer, as any file which
must be created early in the build process can be listed in this
variable.

A source file listed in @code{BUILT_SOURCES} is created before the other
@code{all} targets are made.  However, such a source file is not
compiled unless explicitly requested by mentioning it in some other
@samp{_SOURCES} variable.

So, for instance, if you had header files which were created by a script
run at build time, then you would list these headers in
@code{BUILT_SOURCES}, to ensure that they would be built before any
other compilations (perhaps ones using these headers) were started.


@node Other GNU Tools, Documentation, Other objects, Top
@chapter Other GNU Tools

Since Automake is primarily intended to generate @file{Makefile.in}s for
use in GNU programs, it tries hard to interoperate with other GNU tools.

@menu
* Emacs Lisp::                  Emacs Lisp
* gettext::                     Gettext
* Libtool::                     Libtool
* Java::                        Java
* Python::                      Python
@end menu


@node Emacs Lisp, gettext, Other GNU Tools, Other GNU Tools
@section Emacs Lisp

@cindex _LISP primary, defined
@cindex LISP primary, defined
@cindex Primary variable, LISP

@vindex LISP
@vindex lisp_LISP
@vindex noinst_LISP

Automake provides some support for Emacs Lisp.  The @samp{LISP} primary
is used to hold a list of @file{.el} files.  Possible prefixes for this
primary are @samp{lisp_} and @samp{noinst_}.  Note that if
@code{lisp_LISP} is defined, then @file{configure.in} must run
@code{AM_PATH_LISPDIR} (@pxref{Macros}).

@vindex ELCFILES

By default Automake will byte-compile all Emacs Lisp source files using
the Emacs found by @code{AM_PATH_LISPDIR}.  If you wish to avoid
byte-compiling, simply define the variable @code{ELCFILES} to be empty.
Byte-compiled Emacs Lisp files are not portable among all versions of
Emacs, so it makes sense to turn this off if you expect sites to have
more than one version of Emacs installed.  Furthermore, many packages
don't actually benefit from byte-compilation.  Still, we recommend that
you leave it enabled by default.  It is probably better for sites with
strange setups to cope for themselves than to make the installation less
nice for everybody else.


@node gettext, Libtool, Emacs Lisp, Other GNU Tools
@section Gettext

@cindex GNU Gettext support
@cindex Gettext support
@cindex Support for GNU Gettext

If @code{AM_GNU_GETTEXT} is seen in @file{configure.in}, then Automake
turns on support for GNU gettext, a message catalog system for
internationalization
(@pxref{GNU Gettext, , , gettext, GNU gettext utilities}).

The @code{gettext} support in Automake requires the addition of two
subdirectories to the package, @file{intl} and @file{po}.  Automake
insures that these directories exist and are mentioned in
@code{SUBDIRS}.


@node Libtool, Java, gettext, Other GNU Tools
@section Libtool

Automake provides support for GNU Libtool (@pxref{Top, , Introduction,
libtool, The Libtool Manual}) with the @samp{LTLIBRARIES} primary.
@xref{A Shared Library}.


@node Java, Python, Libtool, Other GNU Tools
@section Java

@cindex _JAVA primary, defined
@cindex JAVA primary, defined
@cindex Primary variable, JAVA

Automake provides some minimal support for Java compilation with the
@samp{JAVA} primary.

Any @file{.java} files listed in a @samp{_JAVA} variable will be
compiled with @code{JAVAC} at build time.  By default, @file{.class}
files are not included in the distribution.

@cindex JAVA restrictions
@cindex Restrictions for JAVA

Currently Automake enforces the restriction that only one @samp{_JAVA}
primary can be used in a given @file{Makefile.am}.  The reason for this
restriction is that, in general, it isn't possible to know which
@file{.class} files were generated from which @file{.java} files -- so
it would be impossible to know which files to install where.  For
instance, a @file{.java} file can define multiple classes; the resulting
@file{.class} file names cannot be predicted without parsing the
@file{.java} file.

There are a few variables which are used when compiling Java sources:

@vtable @code
@item JAVAC
The name of the Java compiler.  This defaults to @samp{javac}.

@item JAVACFLAGS
The flags to pass to the compiler.  This is considered to be a user
variable (@pxref{User Variables}).

@item AM_JAVACFLAGS
More flags to pass to the Java compiler.  This, and not
@code{JAVACFLAGS}, should be used when it is necessary to put Java
compiler flags into @file{Makefile.am}.

@item JAVAROOT
The value of this variable is passed to the @samp{-d} option to
@code{javac}.  It defaults to @samp{$(top_builddir)}.

@item CLASSPATH_ENV
This variable is an @code{sh} expression which is used to set the
@code{CLASSPATH} environment variable on the @code{javac} command line.
(In the future we will probably handle class path setting differently.)
@end vtable


@node Python,  , Java, Other GNU Tools
@section Python

@cindex _PYTHON primary, defined
@cindex PYTHON primary, defined
@cindex Primary variable, PYTHON


Automake provides support for Python compilation with the @samp{PYTHON}
primary.

Any files listed in a @samp{_PYTHON} variable will be byte-compiled with
@code{py-compile} at install time.  @code{py-compile} actually creates
both standard (@file{.pyc}) and byte-compiled (@file{.pyo}) versions of
the source files.  Note that because byte-compilation occurs at install
time, any files listed in @samp{noinst_PYTHON} will not be compiled.
Python source files are included in the distribution by default.

Automake ships with an Autoconf macro called @code{AM_PATH_PYTHON} which
will determine some Python-related directory variables (see below).  If
have called @code{AM_PATH_PYTHON} from you @file{configure.in}, then you
may use the following variables to list you Python source files in your
variables: @samp{python_PYTHON}, @samp{pkgpython_PYTHON},
@samp{pkgpython_PYTHON}, @samp{pyexecdir_PYTHON},
@samp{pkgpyexecdir_PYTHON}, depending where you want your files
installed.

@code{AM_PATH_PYTHON} takes a single optional argument.  This argument,
if present, is the minimum version of Python which can be used for this
package.  If the version of Python found on the system is older than the
required version, then @code{AM_PATH_PYTHON} will cause an error.

@code{AM_PATH_PYTHON} creates several output variables based on the
Python installation found during configuration.

@vtable @code
@item PYTHON
The name of the Python executable.

@item PYTHON_VERSION
The Python version number, in the form @var{major}.@var{minor}
(e.g. @samp{1.5}).  This is currently the value of
@code{sys.version[:3]}.

@item PYTHON_PREFIX
The string @code{$prefix}.  This term may be used in future work
which needs the contents of Python's @code{sys.prefix}, but general
consensus is to always use the value from configure.

@item PYTHON_EXEC_PREFIX
The string @code{$exec_prefix}.  This term may be used in future work
which needs the contents of Python's @code{sys.exec_prefix}, but general
consensus is to always use the value from configure.

@item PYTHON_PLATFORM
The canonical name used by Python to describe the operating system, as
given by @code{sys.platform}.  This value is sometimes needed when
building Python extensions.

@item pythondir
The directory name for the @file{site-packages} subdirectory of the
standard Python install tree.

@item pkgpythondir
This is is the directory under @code{pythondir} which is named after the
package.  That is, it is @samp{$(pythondir)/$(PACKAGE)}.  It is provided
as a convenience.

@item pyexecdir
This is the directory where Python extension modules (shared libraries)
should be installed.

@item pkgpyexecdir
This is a convenience variable which is defined as
@samp{$(pyexecdir)/$(PACKAGE)}.
@end vtable


@node Documentation, Install, Other GNU Tools, Top
@chapter Building documentation

Currently Automake provides support for Texinfo and man pages.

@menu
* Texinfo::                     Texinfo
* Man pages::                   Man pages
@end menu


@node Texinfo, Man pages, Documentation, Documentation
@section Texinfo

@cindex _TEXINFOS primary, defined
@cindex TEXINFOS primary, defined
@cindex Primary variable, TEXINFOS

If the current directory contains Texinfo source, you must declare it
with the @samp{TEXINFOS} primary.  Generally Texinfo files are converted
into info, and thus the @code{info_TEXINFOS} macro is most commonly used
here.  Any Texinfo source file must end in the @file{.texi},
@file{.txi}, or @file{.texinfo} extension.  We recommend @file{.texi}
for new manuals.
@vindex TEXINFOS
@vindex info_TEXINFOS

@cindex Texinfo macro, VERSION
@cindex Texinfo macro, UPDATED
@cindex Texinfo macro, EDITION
@cindex Texinfo macro, UPDATED-MONTH

@cindex VERSION Texinfo macro
@cindex UPDATED Texinfo macro
@cindex EDITION Texinfo macro
@cindex UPDATED-MONTH Texinfo macro

@cindex mdate-sh

If the @file{.texi} file @code{@@include}s @file{version.texi}, then
that file will be automatically generated.  The file @file{version.texi}
defines four Texinfo macros you can reference:

@table @code
@item EDITION
@itemx VERSION
Both of these macros hold the version number of your program.  They are
kept separate for clarity.

@item UPDATED
This holds the date the primary @file{.texi} file was last modified.

@item UPDATED-MONTH
This holds the name of the month in which the primary @file{.texi} file
was last modified.
@end table

The @file{version.texi} support requires the @code{mdate-sh} program;
this program is supplied with Automake and automatically included when
@code{automake} is invoked with the @code{--add-missing} option.

If you have multiple Texinfo files, and you want to use the
@file{version.texi} feature, then you have to have a separate version
file for each Texinfo file.  Automake will treat any include in a
Texinfo file that matches @samp{vers*.texi} just as an automatically
generated version file.

When an info file is rebuilt, the program named by the @code{MAKEINFO}
variable is used to invoke it.  If the @code{makeinfo} program is found
on the system then it will be used by default; otherwise @code{missing}
will be used instead.  The flags in the variables @code{MAKEINFOFLAGS}
and @code{AM_MAKEINFOFLAGS} will be passed to the @code{makeinfo}
invocation; the first of these is intended for use by the user
(@pxref{User Variables}) and the second by the @file{Makefile.am}
writer.
@vindex MAKEINFO
@vindex MAKEINFOFLAGS
@vindex AM_MAKEINFOFLAGS

Sometimes an info file actually depends on more than one @file{.texi}
file.  For instance, in GNU Hello, @file{hello.texi} includes the file
@file{gpl.texi}.  You can tell Automake about these dependencies using
the @code{@var{texi}_TEXINFOS} variable.  Here is how GNU Hello does it:
@vindex TEXINFOS
@vindex _TEXINFOS

@example
info_TEXINFOS = hello.texi
hello_TEXINFOS = gpl.texi
@end example

@cindex texinfo.tex

By default, Automake requires the file @file{texinfo.tex} to appear in
the same directory as the Texinfo source.  However, if you used
@code{AC_CONFIG_AUX_DIR} in @file{configure.in} (@pxref{Input, , Finding
`configure' Input, autoconf, The Autoconf Manual}), then
@file{texinfo.tex} is looked for there.  Automake supplies
@file{texinfo.tex} if @samp{--add-missing} is given.

@vindex TEXINFO_TEX

If your package has Texinfo files in many directories, you can use the
variable @code{TEXINFO_TEX} to tell Automake where to find the canonical
@file{texinfo.tex} for your package.  The value of this variable should
be the relative path from the current @file{Makefile.am} to
@file{texinfo.tex}:

@example
TEXINFO_TEX = ../doc/texinfo.tex
@end example

@opindex no-texinfo.tex

The option @samp{no-texinfo.tex} can be used to eliminate the
requirement for @file{texinfo.tex}.  Use of the variable
@code{TEXINFO_TEX} is preferable, however, because that allows the
@code{dvi} target to still work.

@cindex Target, install-info
@cindex Target, noinstall-info
@cindex install-info target
@cindex noinstall-info target

@opindex no-installinfo
@trindex install-info

Automake generates an @code{install-info} target; some people apparently
use this.  By default, info pages are installed by @samp{make install}.
This can be prevented via the @code{no-installinfo} option.


@node Man pages,  , Texinfo, Documentation
@section Man pages

@cindex _MANS primary, defined
@cindex MANS primary, defined
@cindex Primary variable, MANS

A package can also include man pages (but see the GNU standards on this
matter, @ref{Man Pages, , , standards, The GNU Coding Standards}.)  Man
pages are declared using the @samp{MANS} primary.  Generally the
@code{man_MANS} macro is used.  Man pages are automatically installed in
the correct subdirectory of @code{mandir}, based on the file extension.
@vindex MANS
@vindex man_MANS

File extensions such as @samp{.1c} are handled by looking for the valid
part of the extension and using that to determine the correct
subdirectory of @code{mandir}.  Valid section names are the digits
@samp{0} through @samp{9}, and the letters @samp{l} and @samp{n}.

Sometimes developers prefer to name a man page something like
@file{foo.man} in the source, and then rename it to have the correct
suffix, e.g. @file{foo.1}, when installing the file.  Automake also
supports this mode.  For a valid section named @var{SECTION}, there is a
corresponding directory named @samp{man@var{SECTION}dir}, and a
corresponding @samp{_MANS} variable.  Files listed in such a variable
are installed in the indicated section.  If the file already has a
valid suffix, then it is installed as-is; otherwise the file suffix is
changed to match the section.

For instance, consider this example:
@example
man1_MANS = rename.man thesame.1 alsothesame.1c
@end example

In this case, @file{rename.man} will be renamed to @file{rename.1} when
installed, but the other files will keep their names.

@cindex Target, install-man
@cindex Target, noinstall-man
@cindex install-man target
@cindex noinstall-man target

@c Use @samp{make install} per documentation: (texi)code.
By default, man pages are installed by @samp{make install}.  However,
since the GNU project does not require man pages, many maintainers do
not expend effort to keep the man pages up to date.  In these cases, the
@code{no-installman} option will prevent the man pages from being
installed by default.  The user can still explicitly install them via
@samp{make install-man}.
@opindex no-installman
@trindex install-man

Here is how the man pages are handled in GNU @code{cpio} (which includes
both Texinfo documentation and man pages):

@example
man_MANS = cpio.1 mt.1
EXTRA_DIST = $(man_MANS)
@end example

Man pages are not currently considered to be source, because it is not
uncommon for man pages to be automatically generated.  Therefore they
are not automatically included in the distribution.  However, this can
be changed by use of the @samp{dist_} prefix.

The @samp{nobase_} prefix is meaningless for man pages and is
disallowed.


@node Install, Clean, Documentation, Top
@chapter What Gets Installed

@cindex Installation support
@cindex make install support

@section Basics of installation

Naturally, Automake handles the details of actually installing your
program once it has been built.  All files named by the various
primaries are automatically installed in the appropriate places when the
user runs @code{make install}.

A file named in a primary is installed by copying the built file into
the appropriate directory.  The base name of the file is used when
installing.

@example
bin_PROGRAMS = hello subdir/goodbye
@end example

In this example, both @samp{hello} and @samp{goodbye} will be installed
in @code{$(bindir)}.

Sometimes it is useful to avoid the basename step at install time.  For
instance, you might have a number of header files in subdirectories of
the source tree which are laid out precisely how you want to install
them.  In this situation you can use the @samp{nobase_} prefix to
suppress the base name step.  For example:

@example
nobase_include_HEADERS = stdio.h sys/types.h
@end example

Will install @file{stdio.h} in @code{$(includedir)} and @file{types.h}
in @code{$(includedir)/sys}.

@section The two parts of install

Automake generates separate @code{install-data} and @code{install-exec}
targets, in case the installer is installing on multiple machines which
share directory structure---these targets allow the machine-independent
parts to be installed only once.  @code{install-exec} installs
platform-dependent files, and @code{install-data} installs
platform-independent files.  The @code{install} target depends on both
of these targets.  While Automake tries to automatically segregate
objects into the correct category, the @file{Makefile.am} author is, in
the end, responsible for making sure this is done correctly.
@trindex install-data
@trindex install-exec
@trindex install
@cindex Install, two parts of

Variables using the standard directory prefixes @samp{data},
@samp{info}, @samp{man}, @samp{include}, @samp{oldinclude},
@samp{pkgdata}, or @samp{pkginclude} (e.g. @samp{data_DATA}) are
installed by @samp{install-data}.

Variables using the standard directory prefixes @samp{bin}, @samp{sbin},
@samp{libexec}, @samp{sysconf}, @samp{localstate}, @samp{lib}, or
@samp{pkglib} (e.g. @samp{bin_PROGRAMS}) are installed by
@samp{install-exec}.

Any variable using a user-defined directory prefix with @samp{exec} in
the name (e.g. @samp{myexecbin_PROGRAMS} is installed by
@samp{install-exec}.  All other user-defined prefixes are installed by
@samp{install-data}.

@section Extending installation

It is possible to extend this mechanism by defining an
@code{install-exec-local} or @code{install-data-local} target.  If these
targets exist, they will be run at @samp{make install} time.  These
rules can do almost anything; care is required.
@trindex install-exec-local
@trindex install-data-local

Automake also supports two install hooks, @code{install-exec-hook} and
@code{install-data-hook}.  These hooks are run after all other install
rules of the appropriate type, exec or data, have completed.  So, for
instance, it is possible to perform post-installation modifications
using an install hook.
@cindex Install hook

@section Staged installs

@vindex DESTDIR
Automake generates support for the @samp{DESTDIR} variable in all
install rules.  @samp{DESTDIR} is used during the @samp{make install}
step to relocate install objects into a staging area.  Each object and
path is prefixed with the value of @samp{DESTDIR} before being copied
into the install area.  Here is an example of typical DESTDIR usage:

@example
make DESTDIR=/tmp/staging install
@end example

This places install objects in a directory tree built under
@file{/tmp/staging}.  If @file{/gnu/bin/foo} and
@file{/gnu/share/aclocal/foo.m4} are to be installed, the above command
would install @file{/tmp/staging/gnu/bin/foo} and
@file{/tmp/staging/gnu/share/aclocal/foo.m4}.

This feature is commonly used to build install images and packages.  For
more information, see @ref{Makefile Conventions, , , standards, The GNU
Coding Standards}.

Support for @samp{DESTDIR} is implemented by coding it directly into the
install rules.  If your @file{Makefile.am} uses a local install rule
(e.g., @code{install-exec-local}) or an install hook, then you must
write that code to respect @samp{DESTDIR}.

@section Rules for the user

Automake also generates an @code{uninstall} target, an
@code{installdirs} target, and an @code{install-strip} target.
@trindex uninstall
@trindex installdirs
@trindex install-strip

Automake supports @code{uninstall-local} and @code{uninstall-hook}.
There is no notion of separate uninstalls for ``exec'' and ``data'', as
these features would not provide additional functionality.

Note that @code{uninstall} is not meant as a replacement for a real
packaging tool.


@node Clean, Dist, Install, Top
@chapter What Gets Cleaned

@cindex make clean support

The GNU Makefile Standards specify a number of different clean rules.
See @xref{Standard Targets, , Standard Targets for Users, standards,
The GNU Coding Standards}.

Generally the files that can be cleaned are determined automatically by
Automake.  Of course, Automake also recognizes some variables that can
be defined to specify additional files to clean.  These variables are
@code{MOSTLYCLEANFILES}, @code{CLEANFILES}, @code{DISTCLEANFILES}, and
@code{MAINTAINERCLEANFILES}.
@vindex MOSTLYCLEANFILES
@vindex CLEANFILES
@vindex DISTCLEANFILES
@vindex MAINTAINERCLEANFILES

As the GNU Standards aren't always explicit as to which files should be
removed by which target, we've adopted a heuristic which we believe was
first formulated by Fran@,{c}ois Pinard:

@itemize @bullet
@item
If @code{make} built it, and it is commonly something that one would
want to rebuild (for instance, a @file{.o} file), then
@code{mostlyclean} should delete it.

@item
Otherwise, if @code{make} built it, then @code{clean} should delete it.

@item
If @code{configure} built it, then @code{distclean} should delete it

@item
If the maintainer built it, then @code{maintainer-clean} should
delete it.
@end itemize

We recommend that you follow this same set of heuristics in your
@file{Makefile.am}.


@node Dist, Tests, Clean, Top
@chapter What Goes in a Distribution

@section Basics of distribution

@cindex make dist

The @code{dist} target in the generated @file{Makefile.in} can be used
to generate a gzip'd @code{tar} file and other flavors of archive for
distribution.  The files is named based on the @samp{PACKAGE} and
@samp{VERSION} variables defined by @code{AM_INIT_AUTOMAKE}
(@pxref{Macros}); more precisely the gzip'd @code{tar} file is named
@samp{@var{package}-@var{version}.tar.gz}.
@cvindex PACKAGE
@cvindex VERSION
@trindex dist
You can use the @code{make} variable @samp{GZIP_ENV} to control how gzip
is run.  The default setting is @samp{--best}.

For the most part, the files to distribute are automatically found by
Automake: all source files are automatically included in a distribution,
as are all @file{Makefile.am}s and @file{Makefile.in}s.  Automake also
has a built-in list of commonly used files which are automatically
included if they are found in the current directory (either physically,
or as the target of a @file{Makefile.am} rule).  This list is printed by
@samp{automake --help}.  Also, files which are read by @code{configure}
(i.e. the source files corresponding to the files specified in various
Autoconf macros such as @code{AC_CONFIG_FILES} and siblings) are
automatically distributed.

Still, sometimes there are files which must be distributed, but which
are not covered in the automatic rules.  These files should be listed in
the @code{EXTRA_DIST} variable.  You can mention files from
subdirectories in @code{EXTRA_DIST}.

You can also mention a directory in @code{EXTRA_DIST}; in this case the
entire directory will be recursively copied into the distribution.
Please note that this will also copy @emph{everything} in the directory,
including CVS/RCS version control files.  We recommend against using
this feature.

@vindex EXTRA_DIST

@section Fine-grained distribution control

Sometimes you need tighter control over what does @emph{not} go into the
distribution; for instance you might have source files which are
generated and which you do not want to distribute.  In this case
Automake gives fine-grained control using the @samp{dist} and
@samp{nodist} prefixes.  Any primary or @samp{_SOURCES} variable can be
prefixed with @samp{dist_} to add the listed files to the distribution.
Similarly, @samp{nodist_} can be used to omit the files from the
distribution.
@vindex dist_
@vindex nodist_

As an example, here is how you would cause some data to be distributed
while leaving some source code out of the distribution:

@example
dist_data_DATA = distribute-this
bin_PROGRAMS = foo
nodist_foo_SOURCES = do-not-distribute.c
@end example

@section The dist hook

Another way to to use this is for removing unnecessary files that get
recursively included by specifying a directory in EXTRA_DIST:

@example
EXTRA_DIST = doc

dist-hook:
	rm -rf `find $(distdir)/doc -name CVS`
@end example

If you define @code{SUBDIRS}, Automake will recursively include the
subdirectories in the distribution.  If @code{SUBDIRS} is defined
conditionally (@pxref{Conditionals}), Automake will normally include all
directories that could possibly appear in @code{SUBDIRS} in the
distribution.  If you need to specify the set of directories
conditionally, you can set the variable @code{DIST_SUBDIRS} to the exact
list of subdirectories to include in the distribution.
@vindex DIST_SUBDIRS

@trindex dist-hook

Occasionally it is useful to be able to change the distribution before
it is packaged up.  If the @code{dist-hook} target exists, it is run
after the distribution directory is filled, but before the actual tar
(or shar) file is created.  One way to use this is for distributing
files in subdirectories for which a new @file{Makefile.am} is overkill:

@example
dist-hook:
        mkdir $(distdir)/random
        cp -p $(srcdir)/random/a1 $(srcdir)/random/a2 $(distdir)/random
@end example

@section Checking the distribution

@cindex make distcheck
@cindex make distcleancheck
@vindex distcleancheck_listfiles

Automake also generates a @code{distcheck} target which can be of help
to ensure that a given distribution will actually work.
@code{distcheck} makes a distribution, then tries to do a @code{VPATH}
build, run the testsuite, and finally make another tarfile to ensure the
distribution is self-contained.
@trindex distcheck

Building the package involves running @code{./configure}.  If you need
to supply additional flags to @code{configure}, define them in the
@code{DISTCHECK_CONFIGURE_FLAGS} variable, either in your top-level
@file{Makefile.am}, or on the commande line when invoking @code{make}.
@vindex DISTCHECK_CONFIGURE_FLAGS

If the target @code{distcheck-hook} is defined in your
@file{Makefile.am}, then it will be invoked by @code{distcheck} after
the new distribution has been unpacked, but before the unpacked copy is
configured and built.  Your @code{distcheck-hook} can do almost
anything, though as always caution is advised.  Generally this hook is
used to check for potential distribution errors not caught by the
standard mechanism.

Speaking about potential distribution errors, @code{distcheck} will also
ensure that the @code{distclean} target actually removes all built
files.  This is done by running @code{make distcleancheck} at the end of
the @code{VPATH} build.  By default, @code{distcleancheck} will run
@code{distclean} and then make sure the build tree has been emptied by
running @code{$(distcleancheck_listfiles)}.  Usually this check will
find generated files that you forgot to add to the @code{DISTCLEANFILES}
variable (@pxref{Clean}).
@trindex distcleancheck

The @code{distcleancheck} behaviour should be ok for most packages,
otherwise you have the possibility to override the definitition of
either the @code{distcleancheck} target, or the
@code{$(distcleancheck_listfiles)} variable.  For instance to disable
@code{distcleancheck} completely, add the following rule to your
top-level @file{Makefile.am}:
@vindex distcleancheck_listfiles

@example
distcleancheck:
        @@:
@end example

If you want @code{distcleancheck} to ignore built files which have not
been cleaned because they are also part of the distribution, add the
following definition instead:

@example
distcleancheck_listfiles = \
  find -type f -exec sh -c 'test -f $(scrdir)/@{@} || echo @{@}'
@end example

The above definition is not the default because it's usually an error if
your Makefiles cause some distributed files to be rebuilt when the user
build the package.  (Think about the user missing the tool required to
build the file; or if the required tool is built by your package,
consider the cross-compilation case where it can't be run.)

@section The types of distributions

@trindex dist-gzip
Automake generates a @samp{.tar.gz} file when asked to create a
distribution and other archives formats, @ref{Options}.  The target
@code{dist-gzip} generates the @samp{.tar.gz} file only.


@node Tests, Options, Dist, Top
@chapter Support for test suites

@cindex Test suites
@cindex make check

Automake supports two forms of test suites.

@section Simple Tests

If the variable @code{TESTS} is defined, its value is taken to be a list
of programs to run in order to do the testing.  The programs can either
be derived objects or source objects; the generated rule will look both
in @code{srcdir} and @file{.}.  Programs needing data files should look
for them in @code{srcdir} (which is both an environment variable and a
make variable) so they work when building in a separate directory
(@pxref{Build Directories, , Build Directories , autoconf, The Autoconf
Manual}), and in particular for the @code{distcheck} target
(@pxref{Dist}).

@cindex Exit status 77, special interpretation

The number of failures will be printed at the end of the run.  If a
given test program exits with a status of 77, then its result is ignored
in the final count.  This feature allows non-portable tests to be
ignored in environments where they don't make sense.

The variable @code{TESTS_ENVIRONMENT} can be used to set environment
variables for the test run; the environment variable @code{srcdir} is
set in the rule.  If all your test programs are scripts, you can also
set @code{TESTS_ENVIRONMENT} to an invocation of the shell (e.g.
@samp{$(SHELL) -x}); this can be useful for debugging the tests.
@vindex TESTS
@vindex TESTS_ENVIRONMENT

@cindex Tests, expected failure
@cindex Expected test failure

You may define the variable @code{XFAIL_TESTS} to a list of tests
(usually a subset of @code{TESTS}) that are expected to fail.  This will
reverse the result of those tests.
@vindex XFAIL_TESTS

Automake ensures that each program listed in @code{TESTS} is built
before any tests are run; you can list both source and derived programs
in @code{TESTS}.  For instance, you might want to run a C program as a
test.  To do this you would list its name in @code{TESTS} and also in
@code{check_PROGRAMS}, and then specify it as you would any other
program.

@section DejaGNU Tests

If @uref{ftp://ftp.gnu.org/gnu/dejagnu/, @samp{dejagnu}} appears in
@code{AUTOMAKE_OPTIONS}, then a @code{dejagnu}-based test suite is
assumed.  The variable @code{DEJATOOL} is a list of names which are
passed, one at a time, as the @code{--tool} argument to @code{runtest}
invocations; it defaults to the name of the package.

The variable @code{RUNTESTDEFAULTFLAGS} holds the @code{--tool} and
@code{--srcdir} flags that are passed to dejagnu by default; this can be
overridden if necessary.
@vindex RUNTESTDEFAULTFLAGS

The variables @code{EXPECT} and @code{RUNTEST} can
also be overridden to provide project-specific values.  For instance,
you will need to do this if you are testing a compiler toolchain,
because the default values do not take into account host and target
names.
@opindex dejagnu
@vindex DEJATOOL
@vindex EXPECT
@vindex RUNTEST

The contents of the variable @code{RUNTESTFLAGS} are passed to the
@code{runtest} invocation.  This is considered a ``user variable''
(@pxref{User Variables}).  If you need to set @code{runtest} flags in
@file{Makefile.am}, you can use @code{AM_RUNTESTFLAGS} instead.
@vindex RUNTESTFLAGS
@vindex AM_RUNTESTFLAGS
@c FIXME xref dejagnu

@cindex @file{site.exp}
Automake will generate rules to create a local @file{site.exp} file,
defining various variables detected by @code{./configure}.  This file
is automatically read by DejaGnu.  It is ok for the user of a package
to edit this file in order to tune the test suite.  However this is
not the place where the test suite author should define new variables:
this should be done elsewhere in the real test suite code.
Especially, @file{site.exp} should not be distributed.

In either case, the testing is done via @samp{make check}.

@section Install Tests

The @code{installcheck} target is available to the user as a way to run
any tests after the package has been installed.  You can add tests to
this by writing an @code{installcheck-local} target.


@node Options, Miscellaneous, Tests, Top
@chapter Changing Automake's Behavior

Various features of Automake can be controlled by options in the
@file{Makefile.am}.  Such options are applied on a per-@file{Makefile}
basis when listed in a special @file{Makefile} variable named
@code{AUTOMAKE_OPTIONS}.  They are applied globally to all processed
@file{Makefiles} when listed in the first argument of
@code{AM_INIT_AUTOMAKE} in @file{configure.in}.  Currently understood
options are:
@vindex AUTOMAKE_OPTIONS

@table @asis
@item @code{gnits}
@itemx @code{gnu}
@itemx @code{foreign}
@itemx @code{cygnus}
@cindex Option, gnits
@cindex Option, gnu
@cindex Option, foreign
@cindex Option, cygnus

Set the strictness as appropriate.  The @code{gnits} option also implies
@code{readme-alpha} and @code{check-news}.

@item @code{ansi2knr}
@itemx @code{@var{path}/ansi2knr}
@cindex Option, ansi2knr
Turn on automatic de-ANSI-fication.  @xref{ANSI}.  If preceded by a
path, the generated @file{Makefile.in} will look in the specified
directory to find the @file{ansi2knr} program.  The path should be a
relative path to another directory in the same distribution (Automake
currently does not check this).

@item @code{check-news}
@cindex Option, check-news
Cause @code{make dist} to fail unless the current version number appears
in the first few lines of the @file{NEWS} file.

@item @code{dejagnu}
@cindex Option, dejagnu
Cause @code{dejagnu}-specific rules to be generated.  @xref{Tests}.

@item @code{dist-bzip2}
@cindex Option, dist-bzip2
Generate a @code{dist-bzip2} target, creating a bzip2 tar archive of the
distribution.  @code{dist} will create it in addition to the other
formats.  bzip2 archives are frequently smaller than gzipped archives.
@trindex dist-bzip2

@item @code{dist-shar}
@cindex Option, dist-shar
Generate a @code{dist-shar} target, creating a shar archive of the
distribution.  @code{dist} will create it in addition to the other
formats.
@trindex dist-shar

@item @code{dist-zip}
@cindex Option, dist-zip
Generate a @code{dist-zip} target, creating a zip archive of the
distribution.  @code{dist} will create it in addition to the other
formats.
@trindex dist-zip

@item @code{dist-tarZ}
@cindex Option, dist-tarZ
Generate a @code{dist-tarZ} target, creating a compressed tar archive of
the distribution.  @code{dist} will create it in addition to the other
formats.
@trindex dist-tarZ

@item @code{no-define}
@cindex Option, no-define
This options is meaningful only when passed as an argument to
AM_INIT_AUTOMAKE.  It will prevent the @code{PACKAGE} and @code{VERSION}
variable to be @code{AC_DEFINE}d.

@item @code{no-dependencies}
@cindex Option, no-dependencies
This is similar to using @samp{--include-deps} on the command line, but
is useful for those situations where you don't have the necessary bits
to make automatic dependency tracking work @xref{Dependencies}.  In this
case the effect is to effectively disable automatic dependency tracking.

@item @code{no-exeext}
@cindex Option, no-exeext
If your @file{Makefile.am} defines a target @samp{foo}, it will override
a target named @samp{foo$(EXEEXT)}.  This is necessary when
@code{EXEEXT} is found to be empty.  However, by default automake will
generate an error for this use.  The @code{no-exeext} option will
disable this error.  This is intended for use only where it is known in
advance that the package will not be ported to Windows, or any other
operating system using extensions on executables.

@item @code{no-installinfo}
@cindex Option, no-installinfo
The generated @file{Makefile.in} will not cause info pages to be built
or installed by default.  However, @code{info} and @code{install-info}
targets will still be available.  This option is disallowed at
@samp{GNU} strictness and above.
@trindex info
@trindex install-info

@item @code{no-installman}
@cindex Option, no-installman
The generated @file{Makefile.in} will not cause man pages to be
installed by default.  However, an @code{install-man} target will still
be available for optional installation.  This option is disallowed at
@samp{GNU} strictness and above.
@trindex install-man

@item @code{nostdinc}
@cindex Option, nostdinc
This option can be used to disable the standard @samp{-I} options which
are ordinarily automatically provided by Automake.

@item @code{no-texinfo.tex}
@cindex Option, no-texinfo
Don't require @file{texinfo.tex}, even if there are texinfo files in
this directory.

@item @code{readme-alpha}
@cindex Option, readme-alpha
If this release is an alpha release, and the file @file{README-alpha}
exists, then it will be added to the distribution.  If this option is
given, version numbers are expected to follow one of two forms.  The
first form is @samp{@var{MAJOR}.@var{MINOR}.@var{ALPHA}}, where each
element is a number; the final period and number should be left off for
non-alpha releases.  The second form is
@samp{@var{MAJOR}.@var{MINOR}@var{ALPHA}}, where @var{ALPHA} is a
letter; it should be omitted for non-alpha releases.

@item @code{subdir-objects}
If this option is specified, then objects are placed into the
subdirectory of the build directory corresponding to the subdirectory of
the source file.  For instance if the source file is
@file{subdir/file.cxx}, then the output file would be
@file{subdir/file.o}.

@item @var{version}
@cindex Option, version
A version number (e.g. @samp{0.30}) can be specified.  If Automake is not
newer than the version specified, creation of the @file{Makefile.in}
will be suppressed.
@end table

Unrecognized options are diagnosed by @code{automake}.

If you want an option to apply to all the files in the tree, you can use
the @code{AM_INIT_AUTOMAKE} macro in @file{configure.in}.
@xref{Macros}.


@node Miscellaneous, Include, Options, Top
@chapter Miscellaneous Rules

There are a few rules and variables that didn't fit anywhere else.

@menu
* Tags::                        Interfacing to etags and mkid
* Suffixes::                    Handling new file extensions
* Multilibs::                   Support for multilibbing.
@end menu


@node Tags, Suffixes, Miscellaneous, Miscellaneous
@section Interfacing to @code{etags}

@cindex TAGS support

Automake will generate rules to generate @file{TAGS} files for use with
GNU Emacs under some circumstances.

If any C, C++ or Fortran 77 source code or headers are present, then
@code{tags} and @code{TAGS} targets will be generated for the directory.
@trindex tags

At the topmost directory of a multi-directory package, a @code{tags}
target file will be generated which, when run, will generate a
@file{TAGS} file that includes by reference all @file{TAGS} files from
subdirectories.

The @code{tags} target will also be generated if the variable
@code{ETAGS_ARGS} is defined.  This variable is intended for use in
directories which contain taggable source that @code{etags} does not
understand.  The user can use the @code{ETAGSFLAGS} to pass additional
flags to @code{etags}; @code{AM_ETAGSFLAGS} is also available for use in
@file{Makefile.am}.
@vindex ETAGS_ARGS
@vindex ETAGSFLAGS
@vindex AM_ETAGSFLAGS

Here is how Automake generates tags for its source, and for nodes in its
Texinfo file:

@example
ETAGS_ARGS = automake.in --lang=none \
 --regex='/^@@node[ \t]+\([^,]+\)/\1/' automake.texi
@end example

If you add filenames to @samp{ETAGS_ARGS}, you will probably also
want to set @samp{TAGS_DEPENDENCIES}.  The contents of this variable
are added directly to the dependencies for the @code{tags} target.
@vindex TAGS_DEPENDENCIES

Automake will also generate an @code{ID} target which will run
@code{mkid} on the source.  This is only supported on a
directory-by-directory basis.
@trindex id

Automake also supports the @uref{http://www.gnu.org/software/global/,
GNU Global Tags program}.  The @code{GTAGS} target runs Global Tags
automatically and puts the result in the top build directory.  The
variable @code{GTAGS_ARGS} holds arguments which are passed to
@code{gtags}.
@vindex GTAGS_ARGS


@node Suffixes, Multilibs, Tags, Miscellaneous
@section Handling new file extensions

@cindex Adding new SUFFIXES
@cindex SUFFIXES, adding
@vindex SUFFIXES

It is sometimes useful to introduce a new implicit rule to handle a file
type that Automake does not know about.

For instance, suppose you had a compiler which could compile @samp{.foo}
files to @samp{.o} files.  You would simply define an suffix rule for
your language:

@example
.foo.o:
        foocc -c -o $@@ $<
@end example

Then you could directly use a @samp{.foo} file in a @samp{_SOURCES}
variable and expect the correct results:

@example
bin_PROGRAMS = doit
doit_SOURCES = doit.foo
@end example

This was the simpler and more common case.  In other cases, you will
have to help Automake to figure which extensions you are defining your
suffix rule for.  This usually happens when your extensions does not
start with a dot.  Then, all you have to do is to put a list of new
suffixes in the @code{SUFFIXES} variable @strong{before} you define your
implicit rule.

For instance the following definition prevents Automake to misinterpret
@samp{.idlC.cpp:} as an attemp to transform @samp{.idlC} into
@samp{.cpp}.

@example
SUFFIXES = .idl C.cpp
.idlC.cpp:
        # whatever
@end example

As you may have noted, the @code{SUFFIXES} macro behaves like the
@code{.SUFFIXES} special target of @code{make}.  You should not touch
@code{.SUFFIXES} yourself, but use @code{SUFFIXES} instead and let
Automake generate the suffix list for @code{.SUFFIXES}.  Any given
@code{SUFFIXES} go at the start of the generated suffixes list, followed
by Automake generated suffixes not already in the list.

@node Multilibs,  , Suffixes, Miscellaneous
@section Support for Multilibs

Automake has support for an obscure feature called multilibs.  A
@dfn{multilib} is a library which is built for multiple different ABIs
at a single time; each time the library is built with a different target
flag combination.  This is only useful when the library is intended to
be cross-compiled, and it is almost exclusively used for compiler
support libraries.

The multilib support is still experimental.  Only use it if you are
familiar with multilibs and can debug problems you might encounter.


@node Include, Conditionals, Miscellaneous, Top
@chapter Include

@cmindex include
@cindex Including Makefile fragment
@cindex Makefile fragment, including

Automake supports an @code{include} directive which can be used to
include other @file{Makefile} fragments when @code{automake} is run.
Note that these fragments are read and interpreted by @code{automake},
not by @code{make}.  As with conditionals, @code{make} has no idea that
@code{include} is in use.

There are two forms of @code{include}:

@table @code
@item include $(srcdir)/file
Include a fragment which is found relative to the current source
directory.

@item include $(top_srcdir)/file
Include a fragment which is found relative to the top source directory.
@end table

Note that if a fragment is included inside a conditional, then the
condition applies to the entire contents of that fragment.


@node Conditionals, Gnits, Include, Top
@chapter Conditionals

@cindex Conditionals

Automake supports a simple type of conditionals.

@cvindex AM_CONDITIONAL
Before using a conditional, you must define it by using
@code{AM_CONDITIONAL} in the @code{configure.in} file (@pxref{Macros}).

@defmac AM_CONDITIONAL (@var{conditional}, @var{condition})
The conditional name, @var{conditional}, should be a simple string
starting with a letter and containing only letters, digits, and
underscores.  It must be different from @samp{TRUE} and @samp{FALSE}
which are reserved by Automake.

The shell @var{condition} (suitable for use in a shell @code{if}
statement) is evaluated when @code{configure} is run.  Note that you
must arrange for @emph{every} @code{AM_CONDITIONAL} to be invoked every
time @code{configure} is run -- if @code{AM_CONDITIONAL} is run
conditionally (e.g., in a shell @code{if} statement), then the result
will confuse automake.
@end defmac

@cindex --enable-debug, example
@cindex Example conditional --enable-debug
@cindex Conditional example,  --enable-debug

Conditionals typically depend upon options which the user provides to
the @code{configure} script.  Here is an example of how to write a
conditional which is true if the user uses the @samp{--enable-debug}
option.

@example
AC_ARG_ENABLE(debug,
[  --enable-debug    Turn on debugging],
[case "$@{enableval@}" in
  yes) debug=true ;;
  no)  debug=false ;;
  *) AC_MSG_ERROR(bad value $@{enableval@} for --enable-debug) ;;
esac],[debug=false])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)
@end example

Here is an example of how to use that conditional in @file{Makefile.am}:

@cmindex if
@cmindex endif
@cmindex else

@example
if DEBUG
DBG = debug
else
DBG =
endif
noinst_PROGRAMS = $(DBG)
@end example

This trivial example could also be handled using EXTRA_PROGRAMS
(@pxref{Conditional Programs}).

You may only test a single variable in an @code{if} statement, possibly
negated using @samp{!}.  The @code{else} statement may be omitted.
Conditionals may be nested to any depth.  You may specify an argument to
@code{else} in which case it must be the negation of the condition used
for the current @code{if}.  Similarly you may specify the condition
which is closed by an @code{end}:

@example
if DEBUG
DBG = debug
else !DEBUG
DBG =
endif !DEBUG
@end example

@noindent
Unbalanced conditions are errors.

@anchor{Conditional Append}
Conditionals do not interact very smoothly with the append operator.
In particular, an append must happen in the same conditional context as
the original assignment.  This means that the following will not work:

@example
DBG = foo
if DEBUG
DBG += bar
endif DEBUG
@end example

The behaviour which is probably desired in this situation can be obtained
using a temporary variable:

@example
if DEBUG
TMP_DBG = bar
endif DEBUG
DBG = foo $(TMP_DBG)
@end example

This restriction may be lifted in future versions of automake.

Note that conditionals in Automake are not the same as conditionals in
GNU Make.  Automake conditionals are checked at configure time by the
@file{configure} script, and affect the translation from
@file{Makefile.in} to @file{Makefile}.  They are based on options passed
to @file{configure} and on results that @file{configure} has discovered
about the host system.  GNU Make conditionals are checked at @code{make}
time, and are based on variables passed to the make program or defined
in the @file{Makefile}.

Automake conditionals will work with any make program.


@node Gnits, Cygnus, Conditionals, Top
@chapter The effect of @code{--gnu} and @code{--gnits}

@cindex --gnu, required files
@cindex --gnu, complete description

The @samp{--gnu} option (or @samp{gnu} in the @samp{AUTOMAKE_OPTIONS}
variable) causes @code{automake} to check the following:

@itemize @bullet
@item
The files @file{INSTALL}, @file{NEWS}, @file{README}, @file{COPYING},
@file{AUTHORS}, and @file{ChangeLog} are required at the topmost
directory of the package.

@item
The options @samp{no-installman} and @samp{no-installinfo} are
prohibited.
@end itemize

Note that this option will be extended in the future to do even more
checking; it is advisable to be familiar with the precise requirements
of the GNU standards.  Also, @samp{--gnu} can require certain
non-standard GNU programs to exist for use by various maintainer-only
targets; for instance in the future @code{pathchk} might be required for
@samp{make dist}.

@cindex --gnits, complete description

The @samp{--gnits} option does everything that @samp{--gnu} does, and
checks the following as well:

@itemize @bullet
@item
@samp{make dist} will check to make sure the @file{NEWS} file has been
updated to the current version.

@item
@samp{VERSION} is checked to make sure its format complies with Gnits
standards.
@c FIXME xref when standards are finished

@item
@cindex README-alpha
If @samp{VERSION} indicates that this is an alpha release, and the file
@file{README-alpha} appears in the topmost directory of a package, then
it is included in the distribution.  This is done in @samp{--gnits}
mode, and no other, because this mode is the only one where version
number formats are constrained, and hence the only mode where Automake
can automatically determine whether @file{README-alpha} should be
included.

@item
The file @file{THANKS} is required.
@end itemize


@node Cygnus, Extending, Gnits, Top
@chapter The effect of @code{--cygnus}

@cindex Cygnus strictness

Some packages, notably GNU GCC and GNU gdb, have a build environment
originally written at Cygnus Support (subsequently renamed Cygnus
Solutions, and then later purchased by Red Hat).  Packages with this
ancestry are sometimes referred to as ``Cygnus'' trees.

A Cygnus tree has slightly different rules for how a @file{Makefile.in}
is to be constructed.  Passing @samp{--cygnus} to @code{automake} will
cause any generated @file{Makefile.in} to comply with Cygnus rules.

Here are the precise effects of @samp{--cygnus}:

@itemize @bullet
@item
Info files are always created in the build directory, and not in the
source directory.

@item
@file{texinfo.tex} is not required if a Texinfo source file is
specified.  The assumption is that the file will be supplied, but in a
place that Automake cannot find.  This assumption is an artifact of how
Cygnus packages are typically bundled.

@item
@samp{make dist} is not supported, and the rules for it are not
generated.  Cygnus-style trees use their own distribution mechanism.

@item
Certain tools will be searched for in the build tree as well as in the
user's @samp{PATH}.  These tools are @code{runtest}, @code{expect},
@code{makeinfo} and @code{texi2dvi}.

@item
@code{--foreign} is implied.

@item
The options @samp{no-installinfo} and @samp{no-dependencies} are
implied.

@item
The macros @samp{AM_MAINTAINER_MODE} and @samp{AM_CYGWIN32} are
required.

@item
The @code{check} target doesn't depend on @code{all}.
@end itemize

GNU maintainers are advised to use @samp{gnu} strictness in preference
to the special Cygnus mode.  Some day, perhaps, the differences between
Cygnus trees and GNU trees will disappear (for instance, as GCC is made
more standards compliant).  At that time the special Cygnus mode will be
removed.


@node Extending, Distributing, Cygnus, Top
@chapter When Automake Isn't Enough

Automake's implicit copying semantics means that many problems can be
worked around by simply adding some @code{make} targets and rules to
@file{Makefile.in}.  Automake will ignore these additions.

@cindex -local targets
@cindex local targets

There are some caveats to doing this.  Although you can overload a
target already used by Automake, it is often inadvisable, particularly
in the topmost directory of a package with subdirectories.  However,
various useful targets have a @samp{-local} version you can specify in
your @file{Makefile.in}.  Automake will supplement the standard target
with these user-supplied targets.

@trindex  all-local
@trindex  info-local
@trindex  dvi-local
@trindex  check-local
@trindex  install-data-local
@trindex  install-exec-local
@trindex  uninstall-local
@trindex  mostlyclean-local
@trindex  clean-local
@trindex  distclean-local
@trindex  installdirs-local
@trindex  installcheck-local

The targets that support a local version are @code{all}, @code{info},
@code{dvi}, @code{check}, @code{install-data}, @code{install-exec},
@code{uninstall}, @code{installdirs}, @code{installcheck} and the
various @code{clean} targets (@code{mostlyclean}, @code{clean},
@code{distclean}, and @code{maintainer-clean}).  Note that there are no
@code{uninstall-exec-local} or @code{uninstall-data-local} targets; just
use @code{uninstall-local}.  It doesn't make sense to uninstall just
data or just executables.
@trindex all
@trindex info
@trindex dvi
@trindex check
@trindex install-data
@trindex install-exec
@trindex uninstall

For instance, here is one way to install a file in @file{/etc}:

@example
install-data-local:
        $(INSTALL_DATA) $(srcdir)/afile $(DESTDIR)/etc/afile
@end example

@cindex -hook targets
@cindex hook targets

Some targets also have a way to run another target, called a @dfn{hook},
after their work is done.  The hook is named after the principal target,
with @samp{-hook} appended.  The targets allowing hooks are
@code{install-data}, @code{install-exec}, @code{uninstall}, @code{dist},
and @code{distcheck}.
@trindex install-data-hook
@trindex install-exec-hook
@trindex uninstall-hook
@trindex dist-hook

For instance, here is how to create a hard link to an installed program:

@example
install-exec-hook:
        ln $(DESTDIR)$(bindir)/program $(DESTDIR)$(bindir)/proglink
@end example

@c FIXME should include discussion of variables you can use in these
@c rules

@node Distributing, API versioning, Extending, Top
@chapter Distributing @file{Makefile.in}s

Automake places no restrictions on the distribution of the resulting
@file{Makefile.in}s.  We still encourage software authors to distribute
their work under terms like those of the GPL, but doing so is not
required to use Automake.

Some of the files that can be automatically installed via the
@code{--add-missing} switch do fall under the GPL.  However, these also
have a special exception allowing you to distribute them with your
package, regardless of the licensing you choose.


@node API versioning, Macro and Variable Index, Distributing, Top
@chapter Automake API versioning

New Automake releases usually include bug fixes and new features.
Unfortunately they may also introduce new bugs and incompatibilities.
This makes four reasons why a package may require a particular Automake
version.

Things get worse when maintaining a large tree of packages, each one
requiring a different version of Automake.  In the past, this meant that
any developer (and sometime users) had to install several versions of
Automake in different places, and switch @samp{$PATH} appropriately for
each package.

Starting with version 1.6, Automake installs versioned binaries.  This
means you can install several versions of Automake in the same
@samp{$prefix}, and can select an arbitrary Automake version by running
@samp{automake-1.6} or @samp{automake-1.7} without juggling with
@samp{$PATH}.  Furthermore, @file{Makefile}'s generated by Automake 1.6
will use @samp{automake-1.6} explicitely in their rebuild rules.

Note that @samp{1.6} in @samp{automake-1.6} is Automake's API version,
not Automake's version.  If a bug fix release is made, for instance
Automake 1.6.1, the API version will remain 1.6.  This means that a
package which work with Automake 1.6 should also work with 1.6.1; after
all, this is what people expect from bug fix releases.

Note that if your package relies on a feature or a bug fix introduced in
a release, you can pass this version as an option to Automake to ensure
older releases will not be used.  For instance, use this in your
@file{configure.in}:

@example
  AM_INIT_AUTOMAKE(1.6.1)    dnl Require Automake 1.6.1 or better.
@end example
@noindent
or, in a particular @file{Makefile.am}:

@example
  AUTOMAKE_OPTIONS = 1.6.1   # Require Automake 1.6.1 or better.
@end example
@noindent
Automake will print an error message if its version is
older than the requested version.


@heading What is in the API

Automake's programing interface is not easy to define.  Basically it
should include at least all @strong{documented} variables and targets
that a @samp{Makefile.am} authors can use, the behaviours associated to
them (e.g. the places where @samp{-hook}'s are run), the command line
interface of @samp{automake} and @samp{aclocal}, ...

@heading What is not in the API

Every undocumented variable, target, or command line option, is not part
of the API.  You should avoid using them, as they could change from one
version to the other (even in bug fix releases, if this helps to fix a
bug).

If it turns out you need to use such a undocumented feature, contact
@email{automake@@gnu.org} and try to get it documented and exercised by
the test-suite.

@page
@node Macro and Variable Index, General Index, API versioning, Top
@unnumbered Macro and Variable Index

@printindex vr


@page
@node General Index,  , Macro and Variable Index, Top
@unnumbered General Index

@printindex cp


@page
@contents
@bye
